// generated by Fast Light User Interface Designer (fluid) version 1.0309

#include "ressol_gui.h"

void RessolGui::cb_ressol_activar_i(RKR_Light_Button* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_RESSOLUTION]);
 return;
}
m_process->EFX_Active[EFX_RESSOLUTION]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_RESSOLUTION]->cleanup();
m_parent->findpos(EFX_RESSOLUTION,(int)o->value(),o);
}
void RessolGui::cb_ressol_activar(RKR_Light_Button* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_activar_i(o,v);
}

void RessolGui::cb_ressol_preset_i(RKR_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_RESSOLUTION))
    m_process->Rack_Effects[EFX_RESSOLUTION]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_RESSOLUTION]; i++)
{
    parameter_refresh(i);
};
}
void RessolGui::cb_ressol_preset(RKR_Choice* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_preset_i(o,v);
}

Fl_Menu_Item RessolGui::menu_ressol_preset[] = {
 {"Beefy Marshall", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Euro Power Metal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Presence Boost", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Suppressor", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RessolGui::cb_ressol_WD_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_DryWet,Dry_Wet((int)(o->value())));
}
void RessolGui::cb_ressol_WD(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_WD_i(o,v);
}

void RessolGui::cb_ressol_distort_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_Distortion);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Distortion,(int)o->value());
}
void RessolGui::cb_ressol_distort(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_distort_i(o,v);
}

void RessolGui::cb_ressol_freq_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_LFO_Tempo);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_LFO_Tempo,(int)o->value());
}
void RessolGui::cb_ressol_freq(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_freq_i(o,v);
}

void RessolGui::cb_ressol_width_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_Width);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Width,(int)o->value());
}
void RessolGui::cb_ressol_width(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_width_i(o,v);
}

void RessolGui::cb_ressol_depth_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_Depth);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Depth,(int)o->value());
}
void RessolGui::cb_ressol_depth(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_depth_i(o,v);
}

void RessolGui::cb_ressol_fb_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_Feedback);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Feedback,(int)(o->value()+64));
}
void RessolGui::cb_ressol_fb(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_fb_i(o,v);
}

void RessolGui::cb_ressol_mismatch_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_Mismatch);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Mismatch,(int)o->value());
}
void RessolGui::cb_ressol_mismatch(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_mismatch_i(o,v);
}

void RessolGui::cb_ressol_stdf_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Ressol_LFO_Stereo);
 return;
} 
m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_LFO_Stereo,(int)o->value());
}
void RessolGui::cb_ressol_stdf(RKR_Slider* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_stdf_i(o,v);
}

void RessolGui::cb_ressol_stages_i(RKR_Counter* o, void*) {
  m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Stages,(int)o->value());
}
void RessolGui::cb_ressol_stages(RKR_Counter* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_stages_i(o,v);
}

void RessolGui::cb_ressol_subs_i(RKR_Check_Button* o, void*) {
  m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Subtract,(int)o->value());
}
void RessolGui::cb_ressol_subs(RKR_Check_Button* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_subs_i(o,v);
}

void RessolGui::cb_ressol_hyper_i(RKR_Check_Button* o, void*) {
  m_process->Rack_Effects[EFX_RESSOLUTION]->changepar(Ressol_Hyper,(int)o->value());
}
void RessolGui::cb_ressol_hyper(RKR_Check_Button* o, void* v) {
  ((RessolGui*)(o->parent()))->cb_ressol_hyper_i(o,v);
}
RessolGui::RessolGui(int X, int Y, int W, int H, const char *L)
  : RKR_Gui_Effect(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
this->when(FL_WHEN_RELEASE);
{ RKR_Light_Button* o = ressol_activar = new RKR_Light_Button(5, 4, 34, 18, "On");
  ressol_activar->box(FL_UP_BOX);
  ressol_activar->shortcut(0x37);
  ressol_activar->color((Fl_Color)62);
  ressol_activar->selection_color((Fl_Color)1);
  ressol_activar->labeltype(FL_NORMAL_LABEL);
  ressol_activar->labelfont(0);
  ressol_activar->labelsize(10);
  ressol_activar->labelcolor(FL_FOREGROUND_COLOR);
  ressol_activar->callback((Fl_Callback*)cb_ressol_activar);
  ressol_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  ressol_activar->when(FL_WHEN_CHANGED);
  activate_effect = o;
} // RKR_Light_Button* ressol_activar
{ RKR_Choice* o = ressol_preset = new RKR_Choice(77, 4, 76, 18, "Preset");
  ressol_preset->box(FL_FLAT_BOX);
  ressol_preset->down_box(FL_BORDER_BOX);
  ressol_preset->color(FL_BACKGROUND_COLOR);
  ressol_preset->selection_color(FL_FOREGROUND_COLOR);
  ressol_preset->labeltype(FL_NORMAL_LABEL);
  ressol_preset->labelfont(0);
  ressol_preset->labelsize(10);
  ressol_preset->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_preset->textsize(10);
  ressol_preset->textcolor(FL_BACKGROUND2_COLOR);
  ressol_preset->callback((Fl_Callback*)cb_ressol_preset, (void*)(UD_PRESET_RESSOLUTION));
  ressol_preset->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_preset->when(FL_WHEN_RELEASE_ALWAYS);
  ressol_preset->menu(menu_ressol_preset);
  preset_choice = o;
} // RKR_Choice* ressol_preset
{ ressol_WD = new RKR_Slider(56, 28, 100, 10, "Dry/Wet");
  ressol_WD->type(5);
  ressol_WD->box(FL_FLAT_BOX);
  ressol_WD->color((Fl_Color)178);
  ressol_WD->selection_color((Fl_Color)62);
  ressol_WD->labeltype(FL_NORMAL_LABEL);
  ressol_WD->labelfont(0);
  ressol_WD->labelsize(10);
  ressol_WD->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_WD->maximum(127);
  ressol_WD->step(1);
  ressol_WD->textcolor(FL_BACKGROUND2_COLOR);
  ressol_WD->callback((Fl_Callback*)cb_ressol_WD);
  ressol_WD->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_WD->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_WD
{ ressol_distort = new RKR_Slider(56, 115, 100, 10, "Distort");
  ressol_distort->type(5);
  ressol_distort->box(FL_FLAT_BOX);
  ressol_distort->color((Fl_Color)178);
  ressol_distort->selection_color((Fl_Color)62);
  ressol_distort->labeltype(FL_NORMAL_LABEL);
  ressol_distort->labelfont(0);
  ressol_distort->labelsize(10);
  ressol_distort->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_distort->maximum(127);
  ressol_distort->step(1);
  ressol_distort->textcolor(FL_BACKGROUND2_COLOR);
  ressol_distort->callback((Fl_Callback*)cb_ressol_distort);
  ressol_distort->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_distort->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_distort
{ ressol_freq = new RKR_Slider(56, 43, 100, 10, "Shift");
  ressol_freq->type(5);
  ressol_freq->box(FL_FLAT_BOX);
  ressol_freq->color((Fl_Color)178);
  ressol_freq->selection_color((Fl_Color)62);
  ressol_freq->labeltype(FL_NORMAL_LABEL);
  ressol_freq->labelfont(0);
  ressol_freq->labelsize(10);
  ressol_freq->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_freq->minimum(1);
  ressol_freq->maximum(600);
  ressol_freq->step(1);
  ressol_freq->textcolor(FL_BACKGROUND2_COLOR);
  ressol_freq->callback((Fl_Callback*)cb_ressol_freq);
  ressol_freq->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_freq->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_freq
{ ressol_width = new RKR_Slider(56, 71, 100, 10, "Width");
  ressol_width->type(5);
  ressol_width->box(FL_FLAT_BOX);
  ressol_width->color((Fl_Color)178);
  ressol_width->selection_color((Fl_Color)62);
  ressol_width->labeltype(FL_NORMAL_LABEL);
  ressol_width->labelfont(0);
  ressol_width->labelsize(10);
  ressol_width->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_width->maximum(127);
  ressol_width->step(1);
  ressol_width->textcolor(FL_BACKGROUND2_COLOR);
  ressol_width->callback((Fl_Callback*)cb_ressol_width);
  ressol_width->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_width->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_width
{ ressol_depth = new RKR_Slider(56, 57, 100, 10, "P. Depth");
  ressol_depth->tooltip("Phase Depth");
  ressol_depth->type(5);
  ressol_depth->box(FL_FLAT_BOX);
  ressol_depth->color((Fl_Color)178);
  ressol_depth->selection_color((Fl_Color)62);
  ressol_depth->labeltype(FL_NORMAL_LABEL);
  ressol_depth->labelfont(0);
  ressol_depth->labelsize(10);
  ressol_depth->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_depth->maximum(127);
  ressol_depth->step(1);
  ressol_depth->textcolor(FL_BACKGROUND2_COLOR);
  ressol_depth->callback((Fl_Callback*)cb_ressol_depth);
  ressol_depth->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_depth->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_depth
{ ressol_fb = new RKR_Slider(56, 85, 100, 10, "Feedback");
  ressol_fb->type(5);
  ressol_fb->box(FL_FLAT_BOX);
  ressol_fb->color((Fl_Color)178);
  ressol_fb->selection_color((Fl_Color)62);
  ressol_fb->labeltype(FL_NORMAL_LABEL);
  ressol_fb->labelfont(0);
  ressol_fb->labelsize(10);
  ressol_fb->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_fb->minimum(-64);
  ressol_fb->maximum(64);
  ressol_fb->step(1);
  ressol_fb->textcolor(FL_BACKGROUND2_COLOR);
  ressol_fb->callback((Fl_Callback*)cb_ressol_fb);
  ressol_fb->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_fb->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_fb
{ ressol_mismatch = new RKR_Slider(56, 100, 100, 10, "Mismatch");
  ressol_mismatch->type(5);
  ressol_mismatch->box(FL_FLAT_BOX);
  ressol_mismatch->color((Fl_Color)178);
  ressol_mismatch->selection_color((Fl_Color)62);
  ressol_mismatch->labeltype(FL_NORMAL_LABEL);
  ressol_mismatch->labelfont(0);
  ressol_mismatch->labelsize(10);
  ressol_mismatch->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_mismatch->maximum(127);
  ressol_mismatch->step(1);
  ressol_mismatch->textcolor(FL_BACKGROUND2_COLOR);
  ressol_mismatch->callback((Fl_Callback*)cb_ressol_mismatch);
  ressol_mismatch->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_mismatch->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_mismatch
{ ressol_stdf = new RKR_Slider(56, 130, 100, 10, "Stereo Df");
  ressol_stdf->tooltip("LFO L/R Delay");
  ressol_stdf->type(5);
  ressol_stdf->box(FL_FLAT_BOX);
  ressol_stdf->color((Fl_Color)178);
  ressol_stdf->selection_color((Fl_Color)62);
  ressol_stdf->labeltype(FL_NORMAL_LABEL);
  ressol_stdf->labelfont(0);
  ressol_stdf->labelsize(10);
  ressol_stdf->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_stdf->maximum(127);
  ressol_stdf->step(1);
  ressol_stdf->textcolor(FL_BACKGROUND2_COLOR);
  ressol_stdf->callback((Fl_Callback*)cb_ressol_stdf);
  ressol_stdf->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_stdf->when(FL_WHEN_CHANGED);
} // RKR_Slider* ressol_stdf
{ RKR_Counter* o = ressol_stages = new RKR_Counter(80, 145, 52, 12, "Stages");
  ressol_stages->type(1);
  ressol_stages->box(FL_THIN_UP_BOX);
  ressol_stages->color(FL_BACKGROUND_COLOR);
  ressol_stages->selection_color(FL_INACTIVE_COLOR);
  ressol_stages->labeltype(FL_NORMAL_LABEL);
  ressol_stages->labelfont(0);
  ressol_stages->labelsize(10);
  ressol_stages->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_stages->minimum(1);
  ressol_stages->maximum(12);
  ressol_stages->step(1);
  ressol_stages->value(1);
  ressol_stages->textsize(9);
  ressol_stages->callback((Fl_Callback*)cb_ressol_stages);
  ressol_stages->align(Fl_Align(FL_ALIGN_LEFT));
  ressol_stages->when(FL_WHEN_CHANGED);
  o->set_text_offset(-1);
} // RKR_Counter* ressol_stages
{ ressol_subs = new RKR_Check_Button(18, 160, 64, 15, "Subtract");
  ressol_subs->box(FL_NO_BOX);
  ressol_subs->down_box(FL_BORDER_BOX);
  ressol_subs->color(FL_BACKGROUND_COLOR);
  ressol_subs->selection_color(FL_FOREGROUND_COLOR);
  ressol_subs->labeltype(FL_NORMAL_LABEL);
  ressol_subs->labelfont(0);
  ressol_subs->labelsize(10);
  ressol_subs->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_subs->callback((Fl_Callback*)cb_ressol_subs);
  ressol_subs->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  ressol_subs->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* ressol_subs
{ ressol_hyper = new RKR_Check_Button(90, 160, 53, 15, "Hyper");
  ressol_hyper->box(FL_NO_BOX);
  ressol_hyper->down_box(FL_BORDER_BOX);
  ressol_hyper->color(FL_BACKGROUND_COLOR);
  ressol_hyper->selection_color(FL_FOREGROUND_COLOR);
  ressol_hyper->labeltype(FL_NORMAL_LABEL);
  ressol_hyper->labelfont(0);
  ressol_hyper->labelsize(10);
  ressol_hyper->labelcolor(FL_BACKGROUND2_COLOR);
  ressol_hyper->callback((Fl_Callback*)cb_ressol_hyper);
  ressol_hyper->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  ressol_hyper->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* ressol_hyper
position(X, Y);
end();
}

void RessolGui::parameter_refresh(int index) {
  switch (index)
      {
      case Ressol_DryWet:
          ressol_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_DryWet)));
          break;
      case Ressol_Distortion:
          ressol_distort->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Distortion));
          break;
      case Ressol_LFO_Tempo:
          ressol_freq->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_LFO_Tempo));
          break;
  //    case Ressol_LFO_Random:
  //        ressol_rnd->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_LFO_Random));
  //        break;
  //    case Ressol_LFO_Type:
  //        ressol_lfotype->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_LFO_Type));
  //        break;
      case Ressol_LFO_Stereo:
          ressol_stdf->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_LFO_Stereo));
          break;
      case Ressol_Width:
          ressol_width->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Width));
          break;
      case Ressol_Feedback:
          ressol_fb->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Feedback)-64);
          break;
      case Ressol_Stages:
          ressol_stages->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Stages));
          break;
      case Ressol_Mismatch:
          ressol_mismatch->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Mismatch));
          break;
      case Ressol_Subtract:
          ressol_subs->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Subtract));
          break;
      case Ressol_Depth:
          ressol_depth->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Depth));
          break;
      case Ressol_Hyper:
          ressol_hyper->value(m_process->Rack_Effects[EFX_RESSOLUTION]->getpar(Ressol_Hyper));
          break;
      }
}
