// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "randomedit_gui.h"

void RandomEditGui::cb_random_params_i(RKR_Check_Button* o, void*) {
  m_parent->set_parameters_random((int) o->value());
}
void RandomEditGui::cb_random_params(RKR_Check_Button* o, void* v) {
  ((RandomEditGui*)(o->parent()))->cb_random_params_i(o,v);
}

void RandomEditGui::cb_random_all_active_i(RKR_Check_Button* o, void*) {
  m_parent->set_all_random_active((int) o->value());
}
void RandomEditGui::cb_random_all_active(RKR_Check_Button* o, void* v) {
  ((RandomEditGui*)(o->parent()))->cb_random_all_active_i(o,v);
}

void RandomEditGui::cb_random_current_i(RKR_Check_Button* o, void*) {
  m_parent->set_random_current((int) o->value());
}
void RandomEditGui::cb_random_current(RKR_Check_Button* o, void* v) {
  ((RandomEditGui*)(o->parent()))->cb_random_current_i(o,v);
}

void RandomEditGui::cb_random_max_i(RKR_Counter* o, void*) {
  m_parent->set_max_random((int) o->value());
}
void RandomEditGui::cb_random_max(RKR_Counter* o, void* v) {
  ((RandomEditGui*)(o->parent()))->cb_random_max_i(o,v);
}
RandomEditGui::RandomEditGui(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _RandomEditGui();
}

RandomEditGui::RandomEditGui(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _RandomEditGui();
}

RandomEditGui::RandomEditGui()
  : Fl_Double_Window(0, 0, 240, 320, 0) {
  clear_flag(16);
  _RandomEditGui();
}

void RandomEditGui::_RandomEditGui() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fondo14 = new Fl_Box(0, 1, 240, 319);
} // Fl_Box* Fondo14
{ random_params = new RKR_Check_Button(10, 233, 115, 20, "Random Parameters");
  random_params->tooltip("Random button will set all efx parameters randomly");
  random_params->box(FL_NO_BOX);
  random_params->down_box(FL_DOWN_BOX);
  random_params->color(FL_BACKGROUND_COLOR);
  random_params->selection_color(FL_FOREGROUND_COLOR);
  random_params->labeltype(FL_NORMAL_LABEL);
  random_params->labelfont(0);
  random_params->labelsize(10);
  random_params->labelcolor(FL_BACKGROUND2_COLOR);
  random_params->callback((Fl_Callback*)cb_random_params);
  random_params->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  random_params->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* random_params
{ random_all_active = new RKR_Check_Button(10, 257, 115, 20, "Always Active");
  random_all_active->tooltip("Set all random generated effects as active");
  random_all_active->box(FL_NO_BOX);
  random_all_active->down_box(FL_DOWN_BOX);
  random_all_active->color(FL_BACKGROUND_COLOR);
  random_all_active->selection_color(FL_FOREGROUND_COLOR);
  random_all_active->labeltype(FL_NORMAL_LABEL);
  random_all_active->labelfont(0);
  random_all_active->labelsize(10);
  random_all_active->labelcolor(FL_BACKGROUND2_COLOR);
  random_all_active->callback((Fl_Callback*)cb_random_all_active);
  random_all_active->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  random_all_active->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* random_all_active
{ random_current = new RKR_Check_Button(10, 278, 115, 20, "Use Current Active");
  random_current->tooltip("Use only active effects already on the main rack");
  random_current->box(FL_NO_BOX);
  random_current->down_box(FL_DOWN_BOX);
  random_current->color(FL_BACKGROUND_COLOR);
  random_current->selection_color(FL_FOREGROUND_COLOR);
  random_current->labeltype(FL_NORMAL_LABEL);
  random_current->labelfont(0);
  random_current->labelsize(10);
  random_current->labelcolor(FL_BACKGROUND2_COLOR);
  random_current->callback((Fl_Callback*)cb_random_current);
  random_current->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  random_current->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* random_current
{ RKR_Counter* o = random_max = new RKR_Counter(10, 299, 46, 15, "Max Active Effects");
  random_max->type(1);
  random_max->box(FL_UP_BOX);
  random_max->color(FL_BACKGROUND_COLOR);
  random_max->selection_color(FL_INACTIVE_COLOR);
  random_max->labeltype(FL_NORMAL_LABEL);
  random_max->labelfont(0);
  random_max->labelsize(10);
  random_max->labelcolor(FL_BACKGROUND2_COLOR);
  random_max->minimum(1);
  random_max->maximum(10);
  random_max->step(1);
  random_max->value(6);
  random_max->textsize(9);
  random_max->callback((Fl_Callback*)cb_random_max);
  random_max->align(Fl_Align(FL_ALIGN_RIGHT));
  random_max->when(FL_WHEN_CHANGED);
  o->set_text_offset(-1);
} // RKR_Counter* random_max
{ RandomScroll = new RKR_Scroll(13, 25, 215, 185, "Exclude Effect");
  RandomScroll->type(6);
  RandomScroll->box(FL_NO_BOX);
  RandomScroll->color(FL_BACKGROUND_COLOR);
  RandomScroll->selection_color(FL_BACKGROUND_COLOR);
  RandomScroll->labeltype(FL_NORMAL_LABEL);
  RandomScroll->labelfont(0);
  RandomScroll->labelsize(14);
  RandomScroll->labelcolor(FL_BACKGROUND2_COLOR);
  RandomScroll->align(Fl_Align(FL_ALIGN_TOP));
  RandomScroll->when(FL_WHEN_RELEASE);
  RandomScroll->end();
} // RKR_Scroll* RandomScroll
end();
resizable(this);
}

void RandomEditGui::initialize(RKR * _rkr, RKRGUI *_rgui) {
  m_process = _rkr;
  m_parent = _rgui;
  make_effect_scroller();
}

void RandomEditGui::make_effect_scroller() {
  RandomScroll->clear();
    
      RandomScroll->begin();
      
      for (intptr_t i = 0; i < EFX_NUMBER_EFFECTS; ++i)
      {
          RKR_Check_Button *b = new RKR_Check_Button(15, (i * 20) + 22, 100, 20,
               m_process->efx_names[m_parent->Busca_Eff(i)].Nom);
  
          intptr_t ud = i + UD_random_edit;
          b->user_data((void *) ud);
          b->callback((Fl_Callback *)m_parent->Set_effect);
      }
      
      RandomScroll->end();
}
