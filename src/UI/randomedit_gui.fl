# data file for the Fltk User Interface Designer (fluid)
version 1.0308
header_name {.h}
code_name {.cxx}
widget_class RandomEditGui {open selected
  xywh {1065 115 240 320} type Double resizable
  code0 {\#include "rakarrack.h"}
  class Fl_Double_Window visible
} {
  Fl_Box Fondo14 {
    xywh {0 1 240 319}
  }
  Fl_Check_Button random_params {
    label {Random Parameters}
    callback {m_parent->set_parameters_random((int) o->value());}
    tooltip {Random button will set all efx parameters randomly} xywh {10 233 115 20} down_box DOWN_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button random_all_active {
    label {Always Active}
    callback {m_parent->set_all_random_active((int) o->value());}
    tooltip {Set all random generated effects as active} xywh {10 257 115 20} down_box DOWN_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button random_current {
    label {Use Current Active}
    callback {m_parent->set_random_current((int) o->value());}
    tooltip {Use only active effects already on the main rack} xywh {10 278 115 20} down_box DOWN_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Counter random_max {
    label {Max Active Effects}
    callback {m_parent->set_max_random((int) o->value());}
    xywh {10 299 46 15} type Simple labelsize 10 labelcolor 7 align 8 minimum 1 maximum 10 step 1 value 6 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  decl {RKRGUI* m_parent;} {private local
  }
  decl {RKR* m_process;} {private local
  }
  Fl_Scroll RandomScroll {
    label {Exclude Effect} open
    xywh {13 25 215 185} type VERTICAL_ALWAYS labelcolor 7
    class RKR_Scroll
  } {}
  Function {initialize(RKR * _rkr, RKRGUI *_rgui)} {open return_type void
  } {
    code {m_process = _rkr;
m_parent = _rgui;
make_effect_scroller();} {}
  }
  Function {make_effect_scroller()} {open private return_type void
  } {
    code {RandomScroll->clear();
  
    RandomScroll->begin();
    
    for (intptr_t i = 0; i < EFX_NUMBER_EFFECTS; ++i)
    {
        RKR_Check_Button *b = new RKR_Check_Button(15, (i * 20) + 22, 100, 20,
             m_process->efx_names[m_parent->Busca_Eff(i)].Nom);

        intptr_t ud = i + UD_random_edit;
        b->user_data((void *) ud);
        b->callback((Fl_Callback *)m_parent->Set_effect);
    }
    
    RandomScroll->end();} {}
  }
}
