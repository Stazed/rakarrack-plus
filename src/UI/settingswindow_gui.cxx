// generated by Fast Light User Interface Designer (fluid) version 1.0311

#include "settingswindow_gui.h"
#include "../strlcpy.h"

void SettingsWindowGui::cb_scheme_ch_i(RKR_Choice* o, void*) {
  #ifndef NTK_SUPPORT
switch ((int)o->value())

{

  case 0:

Fl::scheme("");
Fl::redraw();
break;

  case 1:

Fl::scheme("none");
Fl::redraw();
break;

  case 2:

Fl::scheme("gtk+");
Fl::redraw();
break;

  case 3:

Fl::scheme("plastic");
Fl::redraw();
break;

  case 4:

Fl::scheme("gleam");
Fl::redraw();
break;


}
#endif
}
void SettingsWindowGui::cb_scheme_ch(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_scheme_ch_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_scheme_ch[] = {
 {"X11", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"fltk", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"gtk+", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"plastic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"gleam", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Font_Bro_i(RKR_Browser* o, void*) {
  int font_type = (int)o->value()-1;
m_parent->font_type_change(font_type);
}
void SettingsWindowGui::cb_Font_Bro(RKR_Browser* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Font_Bro_i(o,v);
}

void SettingsWindowGui::cb_FSless_i(RKR_Button*, void*) {
  m_parent->font_size_change(global_font_size - 1);
}
void SettingsWindowGui::cb_FSless(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FSless_i(o,v);
}

void SettingsWindowGui::cb_FSplus_i(RKR_Button*, void*) {
  m_parent->font_size_change(global_font_size + 1);
}
void SettingsWindowGui::cb_FSplus(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FSplus_i(o,v);
}

void SettingsWindowGui::cb_FSReset_i(RKR_Button*, void*) {
  scheme_ch->value(2);
    scheme_ch->do_callback();
    Enable_DeacHide->value(0);
    Enable_DeacHide->do_callback();
    Enable_Back->value(0);
    Enable_Back->do_callback();
    Enable_Scale->value(0);
    Enable_Scale->do_callback();
    
    // Background image
    char filename[256];
    snprintf(filename, sizeof(filename), "%s/blackbg.png", DATADIR);
    BackFiname->value(filename);
    RKRP::strlcpy(m_process->Config.BackgroundImage,filename, sizeof(m_process->Config.BackgroundImage));
    
    m_process->Config.EnableBackgroundImage = 0;
    m_parent->PutBackground();
    
    m_parent->back_color_change(RKR_background_color);      // FL_BLACK
    m_parent->leds_color_change(RKR_leds_color);            // FL_DARK_YELLOW
    m_parent->buttons_color_change(RKR_buttons_color);      // FL_DARK3 - Buttons
    m_parent->label_color_change(RKR_labels_color);         // FL_WHITE
    m_parent->font_size_change(C_DEFAULT_FONT_SIZE);
    m_parent->font_type_change(0);
    
    //m_parent->Principal->resize(m_parent->Principal->x(), m_parent->Principal->y(), 960, 540);

    m_parent->save_current_state(3);
    Fl::redraw();
}
void SettingsWindowGui::cb_FSReset(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FSReset_i(o,v);
}

void SettingsWindowGui::cb_B_C_i(RKR_Button*, void*) {
  uchar r,g,b;

Fl::get_color(global_fore_color,r,g,b);
if (!fl_color_chooser("rakarrak buttons color:",r,g,b))
   return;

Fl_Color fore_color = fl_rgb_color(r,g,b);
m_parent->buttons_color_change(fore_color);
}
void SettingsWindowGui::cb_B_C(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_B_C_i(o,v);
}

void SettingsWindowGui::cb_A_C_i(RKR_Button*, void*) {
  uchar r,g,b;

Fl::get_color(global_label_color,r,g,b);
if (!fl_color_chooser("rakarrack label color:",r,g,b))
   return;
   
Fl_Color label_color = fl_rgb_color(r,g,b);
m_parent->label_color_change(label_color);
}
void SettingsWindowGui::cb_A_C(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_A_C_i(o,v);
}

void SettingsWindowGui::cb_L_C_i(RKR_Button*, void*) {
  uchar r,g,b;

Fl::get_color(global_leds_color,r,g,b);
if (!fl_color_chooser("rakarrack leds color:",r,g,b))
   return;

Fl_Color leds_color = fl_rgb_color(r,g,b);
m_parent->leds_color_change(leds_color);
}
void SettingsWindowGui::cb_L_C(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_L_C_i(o,v);
}

void SettingsWindowGui::cb_K_C_i(RKR_Button*, void*) {
  uchar r,g,b;

Fl::get_color(global_back_color,r,g,b);
if (!fl_color_chooser("rakarrack back color:",r,g,b))
   return;

Fl_Color back_color = fl_rgb_color(r,g,b);
m_parent->back_color_change(back_color);
}
void SettingsWindowGui::cb_K_C(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_K_C_i(o,v);
}

void SettingsWindowGui::cb_Enable_Back_i(RKR_Check_Button* o, void*) {
  m_process->Config.EnableBackgroundImage=(int) o->value();
m_parent->PutBackground();
}
void SettingsWindowGui::cb_Enable_Back(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Enable_Back_i(o,v);
}

void SettingsWindowGui::cb_BI_Browser_i(RKR_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.png)",DATADIR,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".png");
BackFiname->value(filename);
RKRP::strlcpy(m_process->Config.BackgroundImage,filename, sizeof(m_process->Config.BackgroundImage));
m_parent->PutBackground();
}
void SettingsWindowGui::cb_BI_Browser(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_BI_Browser_i(o,v);
}

void SettingsWindowGui::cb_Enable_DeacHide_i(RKR_Check_Button* o, void*) {
  m_process->Config.deachide=(int) o->value();
  m_parent->reordena();
}
void SettingsWindowGui::cb_Enable_DeacHide(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Enable_DeacHide_i(o,v);
}

void SettingsWindowGui::cb_Enable_Scale_i(RKR_Check_Button* o, void*) {
  m_process->Config.scalable=(int) o->value();
m_process->change_scale = 1; // true;
}
void SettingsWindowGui::cb_Enable_Scale(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Enable_Scale_i(o,v);
}

void SettingsWindowGui::cb_INSTATE_i(RKR_Check_Button* o, void*) {
  m_process->Config.init_state=(int) o->value();
}
void SettingsWindowGui::cb_INSTATE(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_INSTATE_i(o,v);
}

void SettingsWindowGui::cb_Filter_DC_i(RKR_Check_Button* o, void*) {
  m_process->Config.DC_Offset=(int) o->value();
}
void SettingsWindowGui::cb_Filter_DC(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Filter_DC_i(o,v);
}

void SettingsWindowGui::cb_Pre_Serve_i(RKR_Check_Button* o, void*) {
  m_process->Config.preserve_master=(int) o->value();
}
void SettingsWindowGui::cb_Pre_Serve(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Pre_Serve_i(o,v);
}

void SettingsWindowGui::cb_Update_TAP_i(RKR_Check_Button* o, void*) {
  m_process->Config.Tap_Updated = (int) o->value();
}
void SettingsWindowGui::cb_Update_TAP(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Update_TAP_i(o,v);
}

void SettingsWindowGui::cb_L_SIZE_i(RKR_Counter* o, void*) {
  m_process->Config.looper_size=o->value();
if(!m_process->m_displayed)
{
m_parent->Show_Next_Time();
m_process->m_displayed=1;
};
}
void SettingsWindowGui::cb_L_SIZE(RKR_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_L_SIZE_i(o,v);
}

void SettingsWindowGui::cb_LM_Volume_i(RKR_Counter* o, void*) {
  m_process->Config.Metro_Vol=(int)o->value();
Looper *Efx_Looper = static_cast <Looper*> (m_process->Rack_Effects[EFX_LOOPER]);
Efx_Looper->setmvol(m_process->Config.Metro_Vol);
}
void SettingsWindowGui::cb_LM_Volume(RKR_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_LM_Volume_i(o,v);
}

void SettingsWindowGui::cb_FLPosition_i(RKR_Check_Button* o, void*) {
  m_process->flpos=(int)o->value();
}
void SettingsWindowGui::cb_FLPosition(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FLPosition_i(o,v);
}

void SettingsWindowGui::cb_DB6B_i(RKR_Check_Button* o, void*) {
  m_process->db6booster=(int)o->value();
}
void SettingsWindowGui::cb_DB6B(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_DB6B_i(o,v);
}

void SettingsWindowGui::cb_Calibration_i(RKR_Counter* o, void*) {
  m_process->Config.aFreq=o->value();
m_process->HarmRecNote->update_freqs(m_process->Config.aFreq);
m_process->StHarmRecNote->update_freqs(m_process->Config.aFreq);
m_process->RingRecNote->update_freqs(m_process->Config.aFreq);
}
void SettingsWindowGui::cb_Calibration(RKR_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Calibration_i(o,v);
}

void SettingsWindowGui::cb_RTrigger_i(RKR_Counter* o, void*) {
  m_process->Config.rtrig = o->value();
m_process->HarmRecNote->trigfact = o->value();
m_process->StHarmRecNote->trigfact = o->value();
m_process->RingRecNote->trigfact = o->value();
}
void SettingsWindowGui::cb_RTrigger(RKR_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RTrigger_i(o,v);
}

void SettingsWindowGui::cb_UPSAMPLE_C_i(RKR_Check_Button* o, void*) {
  m_process->Config.upsample=(int)o->value();
m_parent->Show_Reset_Window();
}
void SettingsWindowGui::cb_UPSAMPLE_C(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_UPSAMPLE_C_i(o,v);
}

void SettingsWindowGui::cb_Upr_Amo_i(RKR_Choice* o, void*) {
  m_process->Config.UpAmo =(int) o->value();

if(m_process->Config.upsample)
{
  m_parent->Show_Reset_Window();
};
}
void SettingsWindowGui::cb_Upr_Amo(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Upr_Amo_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Upr_Amo[] = {
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x10", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x11", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x12", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Upr_Qual_i(RKR_Choice* o, void*) {
  m_process->Config.UpQual =(int) o->value();

if(m_process->Config.upsample)
{
  m_parent->Show_Reset_Window();
};
}
void SettingsWindowGui::cb_Upr_Qual(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Upr_Qual_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Upr_Qual[] = {
 {"Best", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Medium", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Fastest", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Zero Order", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Linear", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Downr_Qual_i(RKR_Choice* o, void*) {
  m_process->Config.DownQual =(int) o->value();

if(m_process->Config.upsample)
{
  m_parent->Show_Reset_Window();
};
}
void SettingsWindowGui::cb_Downr_Qual(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Downr_Qual_i(o,v);
}

void SettingsWindowGui::cb_RC_Harm_Opti_i(RKR_Choice* o, void*) {
  m_process->Config.RCOpti_Harm =(int) o->value();

switch(m_process->Config.RCOpti_Harm)
  {
  
  
    case 0:
    	m_process->HarmRecNote->setlpf(5500);
    	m_process->HarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_process->HarmRecNote->setlpf(4500);
    	m_process->HarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_process->HarmRecNote->setlpf(3000);
    	m_process->HarmRecNote->sethpf(300);
    	break;

};
}
void SettingsWindowGui::cb_RC_Harm_Opti(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RC_Harm_Opti_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_RC_Harm_Opti[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Guitar", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Voice", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_RC_St_Harm_Opti_i(RKR_Choice* o, void*) {
  m_process->Config.RCOpti_Stereo =(int) o->value();

switch(m_process->Config.RCOpti_Stereo)
  {
  
  
    case 0:
    	m_process->StHarmRecNote->setlpf(5500);
    	m_process->StHarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_process->StHarmRecNote->setlpf(4500);
    	m_process->StHarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_process->StHarmRecNote->setlpf(3000);
    	m_process->StHarmRecNote->sethpf(300);
    	break;

};
}
void SettingsWindowGui::cb_RC_St_Harm_Opti(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RC_St_Harm_Opti_i(o,v);
}

void SettingsWindowGui::cb_RC_Ring_Opti_i(RKR_Choice* o, void*) {
  m_process->Config.RCOpti_Ring =(int) o->value();

switch(m_process->Config.RCOpti_Ring)
  {
  
  
    case 0:
    	m_process->RingRecNote->setlpf(5500);
    	m_process->RingRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_process->RingRecNote->setlpf(4500);
    	m_process->RingRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_process->RingRecNote->setlpf(3000);
    	m_process->RingRecNote->sethpf(300);
    	break;

};
}
void SettingsWindowGui::cb_RC_Ring_Opti(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RC_Ring_Opti_i(o,v);
}

void SettingsWindowGui::cb_Har_Qual_i(RKR_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       m_process->Config.HarQual=4;
       break;
     case 1:
       m_process->Config.HarQual=8;
       break;
     case 2:
       m_process->Config.HarQual=16;	
	break;
     case 3:
       m_process->Config.HarQual=32;	
	break;	
}

update_harmonizer_quality();
}
void SettingsWindowGui::cb_Har_Qual(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Qual_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Har_Qual[] = {
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Seq_Qual_i(RKR_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       m_process->Config.SeqQual=4;
       break;
     case 1:
       m_process->Config.SeqQual=8;
       break;
     case 2:
       m_process->Config.SeqQual=16;	
	break;
     case 3:
       m_process->Config.SeqQual=32;	
	break;	
}

update_sequence_quality();
}
void SettingsWindowGui::cb_Seq_Qual(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Seq_Qual_i(o,v);
}

void SettingsWindowGui::cb_Ste_Qual_i(RKR_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       m_process->Config.SteQual=4;
       break;
     case 1:
       m_process->Config.SteQual=8;
       break;
     case 2:
       m_process->Config.SteQual=16;	
	break;
     case 3:
       m_process->Config.SteQual=32;	
	break;	
}

update_stereoharm_quality();
}
void SettingsWindowGui::cb_Ste_Qual(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Qual_i(o,v);
}

void SettingsWindowGui::cb_Shi_Qual_i(RKR_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       m_process->Config.ShiQual=4;
       break;
     case 1:
       m_process->Config.ShiQual=8;
       break;
     case 2:
       m_process->Config.ShiQual=16;	
	break;
     case 3:
       m_process->Config.ShiQual=32;	
	break;	
}

update_shifter_quality();
}
void SettingsWindowGui::cb_Shi_Qual(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Shi_Qual_i(o,v);
}

void SettingsWindowGui::cb_Voc_Bands_i(RKR_Choice* o, void*) {
  switch((int)o->value())
{
  case 0:
  m_process->Config.VocBands = 16;
  break;

  case 1:
  m_process->Config.VocBands = 32;
  break;

  case 2:
  m_process->Config.VocBands = 64;
  break;

  case 3:
  m_process->Config.VocBands = 128;
  break;

  case 4:
  m_process->Config.VocBands = 256;
  break;

}

update_vocoder_quality();
}
void SettingsWindowGui::cb_Voc_Bands(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Bands_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Voc_Bands[] = {
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"64", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"128", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"256", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Har_Downsample_i(RKR_Choice* o, void*) {
  m_process->Config.Har_Down=(int)o->value();

update_harmonizer_quality();
}
void SettingsWindowGui::cb_Har_Downsample(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Downsample_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Har_Downsample[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"96000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"48000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"44100", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"22050", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"12000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"4000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Har_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Har_D_Q=(int)o->value();

update_harmonizer_quality();
}
void SettingsWindowGui::cb_Har_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Har_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Har_U_Q=(int)o->value();

update_harmonizer_quality();
}
void SettingsWindowGui::cb_Har_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Rev_Downsample_i(RKR_Choice* o, void*) {
  m_process->Config.Rev_Down=(int)o->value();

update_revtron_quality();
}
void SettingsWindowGui::cb_Rev_Downsample(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Rev_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Rev_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Rev_D_Q=(int)o->value();

update_revtron_quality();
}
void SettingsWindowGui::cb_Rev_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Rev_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Rev_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Rev_U_Q=(int)o->value();

update_revtron_quality();
}
void SettingsWindowGui::cb_Rev_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Rev_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Con_Downsample_i(RKR_Choice* o, void*) {
  m_process->Config.Con_Down=(int)o->value();

update_convo_quality();
}
void SettingsWindowGui::cb_Con_Downsample(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Con_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Con_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Con_D_Q=(int)o->value();

update_convo_quality();
}
void SettingsWindowGui::cb_Con_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Con_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Con_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Con_U_Q=(int)o->value();

update_convo_quality();
}
void SettingsWindowGui::cb_Con_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Con_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Seq_Downsample_i(RKR_Choice* o, void*) {
  m_process->Config.Seq_Down=(int)o->value();
update_sequence_quality();
}
void SettingsWindowGui::cb_Seq_Downsample(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Seq_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Seq_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Seq_D_Q=(int)o->value();
update_sequence_quality();
}
void SettingsWindowGui::cb_Seq_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Seq_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Seq_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Seq_U_Q=(int)o->value();
update_sequence_quality();
}
void SettingsWindowGui::cb_Seq_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Seq_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Shi_Downsample_i(RKR_Choice* o, void*) {
  m_process->Config.Shi_Down=(int)o->value();
update_shifter_quality();
}
void SettingsWindowGui::cb_Shi_Downsample(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Shi_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Shi_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Shi_D_Q=(int)o->value();
update_shifter_quality();
}
void SettingsWindowGui::cb_Shi_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Shi_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Shi_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Shi_U_Q=(int)o->value();
update_shifter_quality();
}
void SettingsWindowGui::cb_Shi_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Shi_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Voc_Downsample_i(RKR_Choice* o, void*) {
  m_process->Config.Voc_Down=(int)o->value();
update_vocoder_quality();
}
void SettingsWindowGui::cb_Voc_Downsample(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Voc_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Voc_D_Q=(int)o->value();
update_vocoder_quality();
}
void SettingsWindowGui::cb_Voc_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Voc_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Voc_U_Q=(int)o->value();
update_vocoder_quality();
}
void SettingsWindowGui::cb_Voc_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Ste_Downsample_i(RKR_Choice* o, void*) {
  m_process->Config.Ste_Down=(int)o->value();

update_stereoharm_quality();
}
void SettingsWindowGui::cb_Ste_Downsample(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Ste_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Ste_D_Q=(int)o->value();

update_stereoharm_quality();
}
void SettingsWindowGui::cb_Ste_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Ste_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Ste_U_Q=(int)o->value();

update_stereoharm_quality();
}
void SettingsWindowGui::cb_Ste_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Dist_Amo_i(RKR_Choice* o, void*) {
  m_process->Config.Dist_res_amount=(int)o->value();
update_distortion_quality();
}
void SettingsWindowGui::cb_Dist_Amo(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Dist_Amo_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Dist_Amo[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x12", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Dist_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Dist_down_q=(int)o->value();
update_distortion_quality();
}
void SettingsWindowGui::cb_Dist_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Dist_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Dist_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Dist_up_q=(int)o->value();
update_distortion_quality();
}
void SettingsWindowGui::cb_Dist_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Dist_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Ovrd_Amo_i(RKR_Choice* o, void*) {
  m_process->Config.Ovrd_res_amount=(int)o->value();
update_overdrive_quality();
}
void SettingsWindowGui::cb_Ovrd_Amo(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Ovrd_Amo_i(o,v);
}

void SettingsWindowGui::cb_Ovrd_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Ovrd_down_q=(int)o->value();
update_overdrive_quality();
}
void SettingsWindowGui::cb_Ovrd_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Ovrd_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Ovrd_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Ovrd_up_q=(int)o->value();
update_overdrive_quality();
}
void SettingsWindowGui::cb_Ovrd_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Ovrd_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Dere_Amo_i(RKR_Choice* o, void*) {
  m_process->Config.Dere_res_amount=(int)o->value();
update_derelict_quality();
}
void SettingsWindowGui::cb_Dere_Amo(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Dere_Amo_i(o,v);
}

void SettingsWindowGui::cb_Dere_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Dere_down_q=(int)o->value();
update_derelict_quality();
}
void SettingsWindowGui::cb_Dere_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Dere_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Dere_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Dere_up_q=(int)o->value();
update_derelict_quality();
}
void SettingsWindowGui::cb_Dere_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Dere_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_DBand_Amo_i(RKR_Choice* o, void*) {
  m_process->Config.DBand_res_amount=(int)o->value();
update_distband_quality();
}
void SettingsWindowGui::cb_DBand_Amo(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_DBand_Amo_i(o,v);
}

void SettingsWindowGui::cb_DBand_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.DBand_down_q=(int)o->value();
update_distband_quality();
}
void SettingsWindowGui::cb_DBand_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_DBand_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_DBand_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.DBand_up_q=(int)o->value();
update_distband_quality();
}
void SettingsWindowGui::cb_DBand_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_DBand_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Stomp_Amo_i(RKR_Choice* o, void*) {
  m_process->Config.Stomp_res_amount=(int)o->value();
update_stompbox_quality();
}
void SettingsWindowGui::cb_Stomp_Amo(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Stomp_Amo_i(o,v);
}

void SettingsWindowGui::cb_Stomp_Down_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Stomp_down_q=(int)o->value();
update_stompbox_quality();
}
void SettingsWindowGui::cb_Stomp_Down_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Stomp_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Stomp_Up_Qua_i(RKR_Choice* o, void*) {
  m_process->Config.Stomp_up_q=(int)o->value();
update_stompbox_quality();
}
void SettingsWindowGui::cb_Stomp_Up_Qua(RKR_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Stomp_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_D_A_Connect_i(RKR_Check_Button* o, void*) {
  m_process->Config.aconnect_MI=(int) o->value();

if (m_process->Config.aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();
}
void SettingsWindowGui::cb_D_A_Connect(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_D_A_Connect_i(o,v);
}

void SettingsWindowGui::cb_BMidiIn_i(RKR_Browser* o, void*) {
  int valor;
valor = (int) o->value();
if(o->text(valor) != NULL)
RKRP::strlcpy(m_process->Config.MID,o->text(valor), sizeof(m_process->Config.MID));
else return;
o->select(valor,1);
m_process->Conecta();
}
void SettingsWindowGui::cb_BMidiIn(RKR_Browser* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_BMidiIn_i(o,v);
}

void SettingsWindowGui::cb_Midi_In_Counter_i(RKR_Counter* o, void*) {
  m_process->Config.MIDI_In_Channel=(int)o->value()-1;
}
void SettingsWindowGui::cb_Midi_In_Counter(RKR_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Midi_In_Counter_i(o,v);
}

void SettingsWindowGui::cb_Har_In_Counter_i(RKR_Counter* o, void*) {
  m_process->Config.Harmonizer_MIDI_Channel=(int)o->value()-1;
}
void SettingsWindowGui::cb_Har_In_Counter(RKR_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_In_Counter_i(o,v);
}

void SettingsWindowGui::cb_Stereo_Har_In_Counter_i(RKR_Counter* o, void*) {
  m_process->Config.StereoHarm_MIDI_Channel=(int)o->value()-1;
}
void SettingsWindowGui::cb_Stereo_Har_In_Counter(RKR_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Stereo_Har_In_Counter_i(o,v);
}

void SettingsWindowGui::cb_Mw0_i(RKR_Check_Button*, void*) {
  m_process->Config.MIDIway=0;
m_parent->ML_Menu->deactivate();
}
void SettingsWindowGui::cb_Mw0(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Mw0_i(o,v);
}

void SettingsWindowGui::cb_Mw1_i(RKR_Check_Button*, void*) {
  m_process->Config.MIDIway=1;
m_parent->ML_Menu->activate();
}
void SettingsWindowGui::cb_Mw1(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Mw1_i(o,v);
}

void SettingsWindowGui::cb_AAssign_i(RKR_Check_Button* o, void*) {
  m_process->Config.autoassign=o->value();
}
void SettingsWindowGui::cb_AAssign(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_AAssign_i(o,v);
}

void SettingsWindowGui::cb_MTable_i(RKR_Check_Button* o, void*) {
  // Set preset to C_CHANGE_PRESET_OFF means do NOT process preset change for GUI
// timeout. In the case of MIDI control PGM change at the same time.
// Will cause crash if we do not set preset off temporarily.    
m_process->Change_Preset = C_CHANGE_PRESET_OFF;

m_process->Config.custom_midi_table=o->value();

// To show/stop highlight on under mouse based on parent status
for (int i = 0; i < scroll->children(); ++i)
{
    Fl_Widget *c = scroll->child(i);

    if(m_process->Config.custom_midi_table)
    {
        c->activate ();
    }
    else
    {
        c->deactivate ();
    }
}

if(m_process->Config.custom_midi_table)
{
    scroll->activate();
}
else
{
    scroll->deactivate();
};
}
void SettingsWindowGui::cb_MTable(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_MTable_i(o,v);
}

void SettingsWindowGui::cb_Load_i(RKR_Button*, void*) {
  m_parent->is_PG_table_modified();
m_parent->Load_Midi_Program_Change_Table();
}
void SettingsWindowGui::cb_Load(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Load_i(o,v);
}

void SettingsWindowGui::cb_Save_i(RKR_Button*, void*) {
  m_parent->Save_Midi_Program_Change_Table();
}
void SettingsWindowGui::cb_Save(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Save_i(o,v);
}

void SettingsWindowGui::cb_D_J_Connect_i(RKR_Check_Button* o, void*) {
  m_process->Config.aconnect_JA=(int) o->value();
if (m_process->Config.aconnect_JA) JackCo->activate();
else JackCo->deactivate();
}
void SettingsWindowGui::cb_D_J_Connect(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_D_J_Connect_i(o,v);
}

void SettingsWindowGui::cb_D_IJ_Connect_i(RKR_Check_Button* o, void*) {
  m_process->Config.aconnect_JIA=(int) o->value();
if (m_process->Config.aconnect_JIA) JackIn->activate();
else JackIn->deactivate();
}
void SettingsWindowGui::cb_D_IJ_Connect(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_D_IJ_Connect_i(o,v);
}

void SettingsWindowGui::cb_MESSAGE_DISABLE_i(RKR_Check_Button* o, void*) {
  m_process->Config.Disable_Warnings=(int) o->value();
}
void SettingsWindowGui::cb_MESSAGE_DISABLE(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_MESSAGE_DISABLE_i(o,v);
}

void SettingsWindowGui::cb_T_TIMEOUT_i(RKR_Check_Button* o, void*) {
  m_process->t_timeout=(int) o->value();
}
void SettingsWindowGui::cb_T_TIMEOUT(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_T_TIMEOUT_i(o,v);
}

void SettingsWindowGui::cb_ENA_TOOL_i(RKR_Check_Button* o, void*) {
  m_process->Config.ena_tool=(int) o->value();
Fl_Tooltip::enable(m_process->Config.ena_tool);
}
void SettingsWindowGui::cb_ENA_TOOL(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_ENA_TOOL_i(o,v);
}

void SettingsWindowGui::cb_Focus_Slider_i(RKR_Fl_Slider* o, void*) {
  m_parent->set_focus_timer(o->value());
}
void SettingsWindowGui::cb_Focus_Slider(RKR_Fl_Slider* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Focus_Slider_i(o,v);
}

void SettingsWindowGui::cb_NSM_SINGLE_STATE_i(RKR_Check_Button* o, void*) {
  #ifdef NSM_SUPPORT
m_process->Config.NSM_single_state=(int) o->value();
#endif
}
void SettingsWindowGui::cb_NSM_SINGLE_STATE(RKR_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_NSM_SINGLE_STATE_i(o,v);
}

void SettingsWindowGui::cb_UD_Browser_i(RKR_Button*, void*) {
  char *dir;
    dir = fl_dir_chooser("Browse:", NULL, 0);

    if (dir == NULL)
        return;

    Udir->value(dir);
    RKRP::strlcpy(m_process->Config.UDirFilename, dir, sizeof(m_process->Config.UDirFilename));

    // Needed for FPreset
    global_user_directory = m_process->Config.UDirFilename;

    m_process->load_MIDI_table_vector();
    m_parent->Scan_Bank_Dir(1);
}
void SettingsWindowGui::cb_UD_Browser(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_UD_Browser_i(o,v);
}

void SettingsWindowGui::cb_BF_Browser_i(RKR_Button*, void*) {
  // If nothing previously set, then default location
    std::string chooser_start_location = "";
    
    // If the user set a User Directory, then use it
    if( (strcmp(m_process->Config.UDirFilename, DATADIR) != 0) && (strcmp(m_process->Config.UDirFilename, UD_NOT_SET) != 0) )
    {
        chooser_start_location = m_process->Config.UDirFilename;
    }

    char *filename;
    filename = fl_file_chooser("Browse:", "(*.rkrb)", chooser_start_location.c_str (), 0);
    
    if (filename == NULL)
        return;
    
    filename = fl_filename_setext(filename, ".rkrb");
    
    BFiname->value(filename);
    RKRP::strlcpy(m_process->Config.BankFilename,filename, sizeof(m_process->Config.BankFilename));

    // If we do not find the Bank file, then the Default.rkrb file is loaded.
    int bank_found = -1;

    // Find the bank chosen by comparing file name
    for(unsigned i = 0; i < m_process->Bank_Vector.size (); i++)
    {
        if(strcmp(m_process->Config.BankFilename , m_process->Bank_Vector[i].Bank_File_Name.c_str ()) == 0)
        {
            bank_found = i;
            break;
        }
    }

    // We did not find the bank in the User Directory, so reload the default
    if(bank_found < 0)
    {
        // Get user default bank file from Settings/Bank/ --Bank Filename
        memset(m_process->Config.BankFilename, 0, sizeof(m_process->Config.BankFilename));
        snprintf(m_process->Config.BankFilename, sizeof(m_process->Config.BankFilename), "%s/Default.rkrb", DATADIR);
        
        m_process->Handle_Message(40, filename);
        BFiname->value(m_process->Config.BankFilename);
    };
}
void SettingsWindowGui::cb_BF_Browser(RKR_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_BF_Browser_i(o,v);
}

void SettingsWindowGui::cb_Username_i(RKR_Input* o, void*) {
  // Copy the user name from settings
    memset(m_process->Config.UserRealName, 0, sizeof(m_process->Config.UserRealName));
    strncpy(m_process->Config.UserRealName, (char*) o->value(), sizeof(m_process->Config.UserRealName) - 1);
}
void SettingsWindowGui::cb_Username(RKR_Input* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Username_i(o,v);
}
SettingsWindowGui::SettingsWindowGui(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _SettingsWindowGui();
}

SettingsWindowGui::SettingsWindowGui(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _SettingsWindowGui();
}

SettingsWindowGui::SettingsWindowGui()
  : Fl_Double_Window(0, 0, 530, 580, 0) {
  clear_flag(16);
  _SettingsWindowGui();
}

void SettingsWindowGui::_SettingsWindowGui() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fondo2 = new Fl_Box(1, 1, 525, 575);
} // Fl_Box* Fondo2
{ STabs = new RKR_Tabs(0, 0, 530, 580);
  STabs->box(FL_THIN_UP_BOX);
  STabs->color(FL_BACKGROUND_COLOR);
  STabs->selection_color(FL_BACKGROUND_COLOR);
  STabs->labeltype(FL_NORMAL_LABEL);
  STabs->labelfont(0);
  STabs->labelsize(14);
  STabs->labelcolor(FL_FOREGROUND_COLOR);
  STabs->align(Fl_Align(FL_ALIGN_TOP));
  STabs->when(FL_WHEN_RELEASE);
  { Look = new Fl_Group(5, 26, 518, 554, "Look");
    Look->box(FL_DOWN_FRAME);
    Look->labelfont(1);
    Look->labelcolor(FL_BACKGROUND2_COLOR);
    Look->align(Fl_Align(FL_ALIGN_LEFT));
    { Fondo6 = new Fl_Box(5, 26, 518, 554);
    } // Fl_Box* Fondo6
    { RKR_Choice* o = scheme_ch = new RKR_Choice(30, 59, 88, 20, "Schema");
      scheme_ch->box(FL_FLAT_BOX);
      scheme_ch->down_box(FL_BORDER_BOX);
      scheme_ch->color(FL_BACKGROUND_COLOR);
      scheme_ch->selection_color(FL_SELECTION_COLOR);
      scheme_ch->labeltype(FL_NORMAL_LABEL);
      scheme_ch->labelfont(0);
      scheme_ch->labelsize(13);
      scheme_ch->labelcolor(FL_BACKGROUND2_COLOR);
      scheme_ch->textsize(12);
      scheme_ch->textcolor(FL_BACKGROUND2_COLOR);
      scheme_ch->callback((Fl_Callback*)cb_scheme_ch);
      scheme_ch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      scheme_ch->when(FL_WHEN_RELEASE);
      scheme_ch->menu(menu_scheme_ch);
      o->set_label_offset(3);
      o->set_text_offset(2);
    } // RKR_Choice* scheme_ch
    { RKR_Browser* o = Font_Bro = new RKR_Browser(30, 100, 400, 225, "Font");
      Font_Bro->type(2);
      Font_Bro->box(FL_NO_BOX);
      Font_Bro->color(FL_BACKGROUND2_COLOR);
      Font_Bro->selection_color(FL_SELECTION_COLOR);
      Font_Bro->labeltype(FL_NORMAL_LABEL);
      Font_Bro->labelfont(0);
      Font_Bro->labelsize(14);
      Font_Bro->labelcolor(FL_BACKGROUND2_COLOR);
      Font_Bro->callback((Fl_Callback*)cb_Font_Bro);
      Font_Bro->align(Fl_Align(FL_ALIGN_TOP));
      Font_Bro->when(FL_WHEN_RELEASE_ALWAYS);
      o->set_browser_type(FONT_BROWSER);
    } // RKR_Browser* Font_Bro
    { RKR_Box* o = FSLabel = new RKR_Box(30, 333, 60, 17, "Font Size");
      FSLabel->box(FL_NO_BOX);
      FSLabel->color(FL_BACKGROUND_COLOR);
      FSLabel->selection_color(FL_BACKGROUND_COLOR);
      FSLabel->labeltype(FL_NORMAL_LABEL);
      FSLabel->labelfont(0);
      FSLabel->labelsize(13);
      FSLabel->labelcolor(FL_BACKGROUND2_COLOR);
      FSLabel->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      FSLabel->when(FL_WHEN_RELEASE);
      o->set_label_offset(3);
    } // RKR_Box* FSLabel
    { RKR_Button* o = FSless = new RKR_Button(95, 330, 30, 20, "-");
      FSless->box(FL_UP_BOX);
      FSless->color(FL_BACKGROUND_COLOR);
      FSless->selection_color(FL_BACKGROUND_COLOR);
      FSless->labeltype(FL_NORMAL_LABEL);
      FSless->labelfont(0);
      FSless->labelsize(14);
      FSless->labelcolor(FL_FOREGROUND_COLOR);
      FSless->callback((Fl_Callback*)cb_FSless);
      FSless->align(Fl_Align(FL_ALIGN_CENTER));
      FSless->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* FSless
    { RKR_Button* o = FSplus = new RKR_Button(130, 330, 30, 20, "+");
      FSplus->box(FL_UP_BOX);
      FSplus->color(FL_BACKGROUND_COLOR);
      FSplus->selection_color(FL_BACKGROUND_COLOR);
      FSplus->labeltype(FL_NORMAL_LABEL);
      FSplus->labelfont(0);
      FSplus->labelsize(14);
      FSplus->labelcolor(FL_FOREGROUND_COLOR);
      FSplus->callback((Fl_Callback*)cb_FSplus);
      FSplus->align(Fl_Align(FL_ALIGN_CENTER));
      FSplus->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* FSplus
    { RKR_Button* o = FSReset = new RKR_Button(30, 547, 57, 20, "Reset");
      FSReset->tooltip("Reset Look settings to program defaults");
      FSReset->box(FL_UP_BOX);
      FSReset->color(FL_BACKGROUND_COLOR);
      FSReset->selection_color(FL_BACKGROUND_COLOR);
      FSReset->labeltype(FL_NORMAL_LABEL);
      FSReset->labelfont(0);
      FSReset->labelsize(14);
      FSReset->labelcolor(FL_FOREGROUND_COLOR);
      FSReset->callback((Fl_Callback*)cb_FSReset);
      FSReset->align(Fl_Align(FL_ALIGN_CENTER));
      FSReset->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* FSReset
    { RKR_Box* o = CLLabel = new RKR_Box(30, 358, 40, 19, "Colors");
      CLLabel->box(FL_NO_BOX);
      CLLabel->color(FL_BACKGROUND_COLOR);
      CLLabel->selection_color(FL_BACKGROUND_COLOR);
      CLLabel->labeltype(FL_NORMAL_LABEL);
      CLLabel->labelfont(0);
      CLLabel->labelsize(13);
      CLLabel->labelcolor(FL_BACKGROUND2_COLOR);
      CLLabel->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      CLLabel->when(FL_WHEN_RELEASE);
      o->set_label_offset(3);
    } // RKR_Box* CLLabel
    { RKR_Button* o = B_C = new RKR_Button(30, 380, 90, 25, "Buttons");
      B_C->box(FL_UP_BOX);
      B_C->color(FL_BACKGROUND_COLOR);
      B_C->selection_color(FL_BACKGROUND_COLOR);
      B_C->labeltype(FL_NORMAL_LABEL);
      B_C->labelfont(0);
      B_C->labelsize(14);
      B_C->labelcolor(FL_FOREGROUND_COLOR);
      B_C->callback((Fl_Callback*)cb_B_C);
      B_C->align(Fl_Align(FL_ALIGN_CENTER));
      B_C->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* B_C
    { RKR_Button* o = A_C = new RKR_Button(130, 380, 90, 25, "Labels");
      A_C->box(FL_UP_BOX);
      A_C->color(FL_BACKGROUND_COLOR);
      A_C->selection_color(FL_BACKGROUND_COLOR);
      A_C->labeltype(FL_NORMAL_LABEL);
      A_C->labelfont(0);
      A_C->labelsize(14);
      A_C->labelcolor(FL_FOREGROUND_COLOR);
      A_C->callback((Fl_Callback*)cb_A_C);
      A_C->align(Fl_Align(FL_ALIGN_CENTER));
      A_C->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* A_C
    { RKR_Button* o = L_C = new RKR_Button(230, 380, 90, 25, "Leds");
      L_C->box(FL_UP_BOX);
      L_C->color(FL_BACKGROUND_COLOR);
      L_C->selection_color(FL_BACKGROUND_COLOR);
      L_C->labeltype(FL_NORMAL_LABEL);
      L_C->labelfont(0);
      L_C->labelsize(14);
      L_C->labelcolor(FL_FOREGROUND_COLOR);
      L_C->callback((Fl_Callback*)cb_L_C);
      L_C->align(Fl_Align(FL_ALIGN_CENTER));
      L_C->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* L_C
    { RKR_Button* o = K_C = new RKR_Button(330, 380, 90, 25, "Background");
      K_C->box(FL_UP_BOX);
      K_C->color(FL_BACKGROUND_COLOR);
      K_C->selection_color(FL_BACKGROUND_COLOR);
      K_C->labeltype(FL_NORMAL_LABEL);
      K_C->labelfont(0);
      K_C->labelsize(14);
      K_C->labelcolor(FL_FOREGROUND_COLOR);
      K_C->callback((Fl_Callback*)cb_K_C);
      K_C->align(Fl_Align(FL_ALIGN_CENTER));
      K_C->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* K_C
    { RKR_Check_Button* o = Enable_Back = new RKR_Check_Button(30, 415, 182, 16, "Enable Background Image");
      Enable_Back->box(FL_NO_BOX);
      Enable_Back->down_box(FL_DOWN_BOX);
      Enable_Back->color(FL_BACKGROUND_COLOR);
      Enable_Back->selection_color(FL_FOREGROUND_COLOR);
      Enable_Back->labeltype(FL_NORMAL_LABEL);
      Enable_Back->labelfont(0);
      Enable_Back->labelsize(12);
      Enable_Back->labelcolor(FL_BACKGROUND2_COLOR);
      Enable_Back->callback((Fl_Callback*)cb_Enable_Back);
      Enable_Back->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Enable_Back->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* Enable_Back
    { RKR_File_Input* o = BackFiname = new RKR_File_Input(30, 455, 390, 40, "Background Image");
      BackFiname->box(FL_DOWN_BOX);
      BackFiname->color(FL_BACKGROUND2_COLOR);
      BackFiname->selection_color(FL_SELECTION_COLOR);
      BackFiname->labeltype(FL_NORMAL_LABEL);
      BackFiname->labelfont(0);
      BackFiname->labelsize(12);
      BackFiname->labelcolor(FL_BACKGROUND2_COLOR);
      BackFiname->textcolor(FL_BACKGROUND2_COLOR);
      BackFiname->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      BackFiname->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
      o->set_text_offset(4);
    } // RKR_File_Input* BackFiname
    { RKR_Button* o = BI_Browser = new RKR_Button(427, 470, 65, 20, "Browse");
      BI_Browser->box(FL_UP_BOX);
      BI_Browser->color(FL_BACKGROUND_COLOR);
      BI_Browser->selection_color(FL_BACKGROUND_COLOR);
      BI_Browser->labeltype(FL_NORMAL_LABEL);
      BI_Browser->labelfont(0);
      BI_Browser->labelsize(14);
      BI_Browser->labelcolor(FL_FOREGROUND_COLOR);
      BI_Browser->callback((Fl_Callback*)cb_BI_Browser);
      BI_Browser->align(Fl_Align(FL_ALIGN_CENTER));
      BI_Browser->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* BI_Browser
    { RKR_Check_Button* o = Enable_DeacHide = new RKR_Check_Button(30, 500, 192, 16, "Hide Unused Effect Widgets");
      Enable_DeacHide->box(FL_NO_BOX);
      Enable_DeacHide->down_box(FL_DOWN_BOX);
      Enable_DeacHide->color(FL_BACKGROUND_COLOR);
      Enable_DeacHide->selection_color(FL_FOREGROUND_COLOR);
      Enable_DeacHide->labeltype(FL_NORMAL_LABEL);
      Enable_DeacHide->labelfont(0);
      Enable_DeacHide->labelsize(12);
      Enable_DeacHide->labelcolor(FL_BACKGROUND2_COLOR);
      Enable_DeacHide->callback((Fl_Callback*)cb_Enable_DeacHide);
      Enable_DeacHide->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Enable_DeacHide->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* Enable_DeacHide
    { RKR_Check_Button* o = Enable_Scale = new RKR_Check_Button(30, 525, 181, 16, "Set Main Window Scalable");
      Enable_Scale->box(FL_NO_BOX);
      Enable_Scale->down_box(FL_DOWN_BOX);
      Enable_Scale->color(FL_BACKGROUND_COLOR);
      Enable_Scale->selection_color(FL_FOREGROUND_COLOR);
      Enable_Scale->labeltype(FL_NORMAL_LABEL);
      Enable_Scale->labelfont(0);
      Enable_Scale->labelsize(12);
      Enable_Scale->labelcolor(FL_BACKGROUND2_COLOR);
      Enable_Scale->callback((Fl_Callback*)cb_Enable_Scale);
      Enable_Scale->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Enable_Scale->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* Enable_Scale
    Look->end();
  } // Fl_Group* Look
  { AUDIO_SET = new Fl_Group(5, 26, 518, 554, "Audio");
    AUDIO_SET->box(FL_DOWN_FRAME);
    AUDIO_SET->labelfont(1);
    AUDIO_SET->labelcolor(FL_BACKGROUND2_COLOR);
    AUDIO_SET->align(Fl_Align(FL_ALIGN_LEFT));
    AUDIO_SET->hide();
    { Fondo7 = new Fl_Box(5, 26, 518, 554);
    } // Fl_Box* Fondo7
    { RKR_Check_Button* o = INSTATE = new RKR_Check_Button(30, 40, 124, 16, "FX On at start");
      INSTATE->box(FL_NO_BOX);
      INSTATE->down_box(FL_DOWN_BOX);
      INSTATE->color(FL_BACKGROUND_COLOR);
      INSTATE->selection_color(FL_FOREGROUND_COLOR);
      INSTATE->labeltype(FL_NORMAL_LABEL);
      INSTATE->labelfont(0);
      INSTATE->labelsize(12);
      INSTATE->labelcolor(FL_BACKGROUND2_COLOR);
      INSTATE->callback((Fl_Callback*)cb_INSTATE);
      INSTATE->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      INSTATE->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* INSTATE
    { RKR_Check_Button* o = Filter_DC = new RKR_Check_Button(30, 64, 152, 16, "Filter Input DC Offset");
      Filter_DC->box(FL_NO_BOX);
      Filter_DC->down_box(FL_DOWN_BOX);
      Filter_DC->color(FL_BACKGROUND_COLOR);
      Filter_DC->selection_color(FL_FOREGROUND_COLOR);
      Filter_DC->labeltype(FL_NORMAL_LABEL);
      Filter_DC->labelfont(0);
      Filter_DC->labelsize(12);
      Filter_DC->labelcolor(FL_BACKGROUND2_COLOR);
      Filter_DC->callback((Fl_Callback*)cb_Filter_DC);
      Filter_DC->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Filter_DC->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* Filter_DC
    { RKR_Check_Button* o = Pre_Serve = new RKR_Check_Button(30, 87, 275, 16, "Preserve Gain/Master when Preset change");
      Pre_Serve->box(FL_NO_BOX);
      Pre_Serve->down_box(FL_DOWN_BOX);
      Pre_Serve->color(FL_BACKGROUND_COLOR);
      Pre_Serve->selection_color(FL_FOREGROUND_COLOR);
      Pre_Serve->labeltype(FL_NORMAL_LABEL);
      Pre_Serve->labelfont(0);
      Pre_Serve->labelsize(12);
      Pre_Serve->labelcolor(FL_BACKGROUND2_COLOR);
      Pre_Serve->callback((Fl_Callback*)cb_Pre_Serve);
      Pre_Serve->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Pre_Serve->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* Pre_Serve
    { RKR_Check_Button* o = Update_TAP = new RKR_Check_Button(30, 108, 264, 16, "Update TapTempo when Preset change");
      Update_TAP->box(FL_NO_BOX);
      Update_TAP->down_box(FL_DOWN_BOX);
      Update_TAP->color(FL_BACKGROUND_COLOR);
      Update_TAP->selection_color(FL_FOREGROUND_COLOR);
      Update_TAP->labeltype(FL_NORMAL_LABEL);
      Update_TAP->labelfont(0);
      Update_TAP->labelsize(12);
      Update_TAP->labelcolor(FL_BACKGROUND2_COLOR);
      Update_TAP->callback((Fl_Callback*)cb_Update_TAP);
      Update_TAP->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Update_TAP->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* Update_TAP
    { RKR_Box* o = loop_Label = new RKR_Box(30, 211, 136, 18, "Looper Size Seconds");
      loop_Label->box(FL_NO_BOX);
      loop_Label->color(FL_BACKGROUND_COLOR);
      loop_Label->selection_color(FL_BACKGROUND_COLOR);
      loop_Label->labeltype(FL_NORMAL_LABEL);
      loop_Label->labelfont(0);
      loop_Label->labelsize(12);
      loop_Label->labelcolor(FL_FOREGROUND_COLOR);
      loop_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      loop_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* loop_Label
    { L_SIZE = new RKR_Counter(165, 210, 47, 18);
      L_SIZE->type(1);
      L_SIZE->box(FL_UP_BOX);
      L_SIZE->color(FL_BACKGROUND_COLOR);
      L_SIZE->selection_color(FL_INACTIVE_COLOR);
      L_SIZE->labeltype(FL_NORMAL_LABEL);
      L_SIZE->labelfont(0);
      L_SIZE->labelsize(10);
      L_SIZE->labelcolor(FL_BACKGROUND2_COLOR);
      L_SIZE->minimum(0.5);
      L_SIZE->maximum(30);
      L_SIZE->step(0.5);
      L_SIZE->value(0.5);
      L_SIZE->textsize(10);
      L_SIZE->callback((Fl_Callback*)cb_L_SIZE);
      L_SIZE->align(Fl_Align(FL_ALIGN_LEFT));
      L_SIZE->when(FL_WHEN_RELEASE);
    } // RKR_Counter* L_SIZE
    { RKR_Box* o = loop_metro_Label = new RKR_Box(30, 237, 136, 18, "Looper Metro Volume");
      loop_metro_Label->box(FL_NO_BOX);
      loop_metro_Label->color(FL_BACKGROUND_COLOR);
      loop_metro_Label->selection_color(FL_BACKGROUND_COLOR);
      loop_metro_Label->labeltype(FL_NORMAL_LABEL);
      loop_metro_Label->labelfont(0);
      loop_metro_Label->labelsize(12);
      loop_metro_Label->labelcolor(FL_FOREGROUND_COLOR);
      loop_metro_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      loop_metro_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* loop_metro_Label
    { RKR_Counter* o = LM_Volume = new RKR_Counter(165, 237, 47, 18);
      LM_Volume->tooltip("Looper Metronome Volume");
      LM_Volume->type(1);
      LM_Volume->box(FL_UP_BOX);
      LM_Volume->color(FL_BACKGROUND_COLOR);
      LM_Volume->selection_color(FL_INACTIVE_COLOR);
      LM_Volume->labeltype(FL_NORMAL_LABEL);
      LM_Volume->labelfont(0);
      LM_Volume->labelsize(12);
      LM_Volume->labelcolor(FL_BACKGROUND2_COLOR);
      LM_Volume->minimum(0);
      LM_Volume->maximum(100);
      LM_Volume->step(1);
      LM_Volume->value(50);
      LM_Volume->textsize(10);
      LM_Volume->callback((Fl_Callback*)cb_LM_Volume);
      LM_Volume->align(Fl_Align(FL_ALIGN_RIGHT));
      LM_Volume->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Counter* LM_Volume
    { RKR_Check_Button* o = FLPosition = new RKR_Check_Button(30, 130, 203, 16, "Limiter before Output Volume");
      FLPosition->box(FL_NO_BOX);
      FLPosition->down_box(FL_DOWN_BOX);
      FLPosition->color(FL_BACKGROUND_COLOR);
      FLPosition->selection_color(FL_FOREGROUND_COLOR);
      FLPosition->labeltype(FL_NORMAL_LABEL);
      FLPosition->labelfont(0);
      FLPosition->labelsize(12);
      FLPosition->labelcolor(FL_BACKGROUND2_COLOR);
      FLPosition->callback((Fl_Callback*)cb_FLPosition);
      FLPosition->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      FLPosition->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* FLPosition
    { RKR_Check_Button* o = DB6B = new RKR_Check_Button(30, 152, 140, 16, "+6dB Final Limiter ");
      DB6B->box(FL_NO_BOX);
      DB6B->down_box(FL_DOWN_BOX);
      DB6B->color(FL_BACKGROUND_COLOR);
      DB6B->selection_color(FL_FOREGROUND_COLOR);
      DB6B->labeltype(FL_NORMAL_LABEL);
      DB6B->labelfont(0);
      DB6B->labelsize(12);
      DB6B->labelcolor(FL_BACKGROUND2_COLOR);
      DB6B->callback((Fl_Callback*)cb_DB6B);
      DB6B->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      DB6B->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* DB6B
    { RKR_Box* o = Calibration_Label = new RKR_Box(30, 283, 136, 18, "Tuner Calibration A4");
      Calibration_Label->box(FL_NO_BOX);
      Calibration_Label->color(FL_BACKGROUND_COLOR);
      Calibration_Label->selection_color(FL_BACKGROUND_COLOR);
      Calibration_Label->labeltype(FL_NORMAL_LABEL);
      Calibration_Label->labelfont(0);
      Calibration_Label->labelsize(12);
      Calibration_Label->labelcolor(FL_FOREGROUND_COLOR);
      Calibration_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Calibration_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Calibration_Label
    { Calibration = new RKR_Counter(170, 280, 116, 21);
      Calibration->box(FL_UP_BOX);
      Calibration->color(FL_BACKGROUND_COLOR);
      Calibration->selection_color(FL_INACTIVE_COLOR);
      Calibration->labeltype(FL_NORMAL_LABEL);
      Calibration->labelfont(0);
      Calibration->labelsize(10);
      Calibration->labelcolor(FL_BACKGROUND2_COLOR);
      Calibration->minimum(420);
      Calibration->maximum(460);
      Calibration->value(440);
      Calibration->textsize(10);
      Calibration->callback((Fl_Callback*)cb_Calibration);
      Calibration->align(Fl_Align(FL_ALIGN_LEFT));
      Calibration->when(FL_WHEN_CHANGED);
    } // RKR_Counter* Calibration
    { RKR_Counter* o = RTrigger = new RKR_Counter(170, 310, 116, 21);
      RTrigger->tooltip("Recognize Note Trigger");
      RTrigger->box(FL_UP_BOX);
      RTrigger->color(FL_BACKGROUND_COLOR);
      RTrigger->selection_color(FL_INACTIVE_COLOR);
      RTrigger->labeltype(FL_NORMAL_LABEL);
      RTrigger->labelfont(0);
      RTrigger->labelsize(12);
      RTrigger->labelcolor(FL_BACKGROUND2_COLOR);
      RTrigger->minimum(0.01);
      RTrigger->maximum(0.99);
      RTrigger->step(0.01);
      RTrigger->value(0.6);
      RTrigger->textsize(10);
      RTrigger->callback((Fl_Callback*)cb_RTrigger);
      RTrigger->align(Fl_Align(FL_ALIGN_RIGHT));
      RTrigger->when(FL_WHEN_CHANGED);
      o->lstep(0.1);
      o->set_label_offset(2);
    } // RKR_Counter* RTrigger
    { RKR_Check_Button* o = UPSAMPLE_C = new RKR_Check_Button(30, 175, 141, 16, "Master Upsampling");
      UPSAMPLE_C->tooltip("Check to Activate Master Upsampling");
      UPSAMPLE_C->box(FL_NO_BOX);
      UPSAMPLE_C->down_box(FL_DOWN_BOX);
      UPSAMPLE_C->color(FL_BACKGROUND_COLOR);
      UPSAMPLE_C->selection_color(FL_FOREGROUND_COLOR);
      UPSAMPLE_C->labeltype(FL_NORMAL_LABEL);
      UPSAMPLE_C->labelfont(0);
      UPSAMPLE_C->labelsize(12);
      UPSAMPLE_C->labelcolor(FL_BACKGROUND2_COLOR);
      UPSAMPLE_C->callback((Fl_Callback*)cb_UPSAMPLE_C);
      UPSAMPLE_C->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      UPSAMPLE_C->when(FL_WHEN_CHANGED);
      o->set_label_offset(2);
    } // RKR_Check_Button* UPSAMPLE_C
    { RKR_Choice* o = Upr_Amo = new RKR_Choice(241, 175, 47, 18, "Amount");
      Upr_Amo->box(FL_FLAT_BOX);
      Upr_Amo->down_box(FL_BORDER_BOX);
      Upr_Amo->color(FL_BACKGROUND_COLOR);
      Upr_Amo->selection_color(FL_SELECTION_COLOR);
      Upr_Amo->labeltype(FL_NORMAL_LABEL);
      Upr_Amo->labelfont(0);
      Upr_Amo->labelsize(11);
      Upr_Amo->labelcolor(FL_BACKGROUND2_COLOR);
      Upr_Amo->textsize(10);
      Upr_Amo->textcolor(FL_BACKGROUND2_COLOR);
      Upr_Amo->callback((Fl_Callback*)cb_Upr_Amo);
      Upr_Amo->align(Fl_Align(FL_ALIGN_LEFT));
      Upr_Amo->when(FL_WHEN_RELEASE);
      Upr_Amo->menu(menu_Upr_Amo);
      o->set_label_offset(1);
    } // RKR_Choice* Upr_Amo
    { RKR_Choice* o = Upr_Qual = new RKR_Choice(313, 175, 72, 18, "Up");
      Upr_Qual->box(FL_FLAT_BOX);
      Upr_Qual->down_box(FL_BORDER_BOX);
      Upr_Qual->color(FL_BACKGROUND_COLOR);
      Upr_Qual->selection_color(FL_SELECTION_COLOR);
      Upr_Qual->labeltype(FL_NORMAL_LABEL);
      Upr_Qual->labelfont(0);
      Upr_Qual->labelsize(11);
      Upr_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Upr_Qual->textsize(10);
      Upr_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Upr_Qual->callback((Fl_Callback*)cb_Upr_Qual);
      Upr_Qual->align(Fl_Align(FL_ALIGN_LEFT));
      Upr_Qual->when(FL_WHEN_RELEASE);
      Upr_Qual->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Upr_Qual
    { RKR_Choice* o = Downr_Qual = new RKR_Choice(425, 175, 73, 18, "Down");
      Downr_Qual->box(FL_FLAT_BOX);
      Downr_Qual->down_box(FL_BORDER_BOX);
      Downr_Qual->color(FL_BACKGROUND_COLOR);
      Downr_Qual->selection_color(FL_SELECTION_COLOR);
      Downr_Qual->labeltype(FL_NORMAL_LABEL);
      Downr_Qual->labelfont(0);
      Downr_Qual->labelsize(11);
      Downr_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Downr_Qual->textsize(10);
      Downr_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Downr_Qual->callback((Fl_Callback*)cb_Downr_Qual);
      Downr_Qual->align(Fl_Align(FL_ALIGN_LEFT));
      Downr_Qual->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Downr_Qual
    { RKR_Box* o = note_trig_Label = new RKR_Box(30, 312, 136, 18, "Note Trigger");
      note_trig_Label->box(FL_NO_BOX);
      note_trig_Label->color(FL_BACKGROUND_COLOR);
      note_trig_Label->selection_color(FL_BACKGROUND_COLOR);
      note_trig_Label->labeltype(FL_NORMAL_LABEL);
      note_trig_Label->labelfont(0);
      note_trig_Label->labelsize(12);
      note_trig_Label->labelcolor(FL_FOREGROUND_COLOR);
      note_trig_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      note_trig_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* note_trig_Label
    { RKR_Box* o = Recognize_Label = new RKR_Box(30, 360, 176, 18, "Recognize Note Optimization");
      Recognize_Label->box(FL_NO_BOX);
      Recognize_Label->color(FL_BACKGROUND_COLOR);
      Recognize_Label->selection_color(FL_BACKGROUND_COLOR);
      Recognize_Label->labeltype(FL_NORMAL_LABEL);
      Recognize_Label->labelfont(0);
      Recognize_Label->labelsize(12);
      Recognize_Label->labelcolor(FL_FOREGROUND_COLOR);
      Recognize_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Recognize_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Recognize_Label
    { RC_Harm_Opti = new RKR_Choice(216, 360, 72, 18, "Harmonizer");
      RC_Harm_Opti->box(FL_FLAT_BOX);
      RC_Harm_Opti->down_box(FL_BORDER_BOX);
      RC_Harm_Opti->color(FL_BACKGROUND_COLOR);
      RC_Harm_Opti->selection_color(FL_SELECTION_COLOR);
      RC_Harm_Opti->labeltype(FL_NORMAL_LABEL);
      RC_Harm_Opti->labelfont(0);
      RC_Harm_Opti->labelsize(10);
      RC_Harm_Opti->labelcolor(FL_BACKGROUND2_COLOR);
      RC_Harm_Opti->textsize(10);
      RC_Harm_Opti->textcolor(FL_BACKGROUND2_COLOR);
      RC_Harm_Opti->callback((Fl_Callback*)cb_RC_Harm_Opti);
      RC_Harm_Opti->align(Fl_Align(FL_ALIGN_TOP));
      RC_Harm_Opti->when(FL_WHEN_RELEASE);
      RC_Harm_Opti->menu(menu_RC_Harm_Opti);
    } // RKR_Choice* RC_Harm_Opti
    { RKR_Choice* o = RC_St_Harm_Opti = new RKR_Choice(312, 360, 72, 18, "Stereo Harmonizer");
      RC_St_Harm_Opti->box(FL_FLAT_BOX);
      RC_St_Harm_Opti->down_box(FL_BORDER_BOX);
      RC_St_Harm_Opti->color(FL_BACKGROUND_COLOR);
      RC_St_Harm_Opti->selection_color(FL_SELECTION_COLOR);
      RC_St_Harm_Opti->labeltype(FL_NORMAL_LABEL);
      RC_St_Harm_Opti->labelfont(0);
      RC_St_Harm_Opti->labelsize(10);
      RC_St_Harm_Opti->labelcolor(FL_BACKGROUND2_COLOR);
      RC_St_Harm_Opti->textsize(10);
      RC_St_Harm_Opti->textcolor(FL_BACKGROUND2_COLOR);
      RC_St_Harm_Opti->callback((Fl_Callback*)cb_RC_St_Harm_Opti);
      RC_St_Harm_Opti->align(Fl_Align(FL_ALIGN_TOP));
      RC_St_Harm_Opti->when(FL_WHEN_RELEASE);
      o->menu(menu_RC_Harm_Opti);
    } // RKR_Choice* RC_St_Harm_Opti
    { RKR_Choice* o = RC_Ring_Opti = new RKR_Choice(408, 360, 72, 18, "Ring");
      RC_Ring_Opti->box(FL_FLAT_BOX);
      RC_Ring_Opti->down_box(FL_BORDER_BOX);
      RC_Ring_Opti->color(FL_BACKGROUND_COLOR);
      RC_Ring_Opti->selection_color(FL_SELECTION_COLOR);
      RC_Ring_Opti->labeltype(FL_NORMAL_LABEL);
      RC_Ring_Opti->labelfont(0);
      RC_Ring_Opti->labelsize(10);
      RC_Ring_Opti->labelcolor(FL_BACKGROUND2_COLOR);
      RC_Ring_Opti->textsize(10);
      RC_Ring_Opti->textcolor(FL_BACKGROUND2_COLOR);
      RC_Ring_Opti->callback((Fl_Callback*)cb_RC_Ring_Opti);
      RC_Ring_Opti->align(Fl_Align(FL_ALIGN_TOP));
      RC_Ring_Opti->when(FL_WHEN_RELEASE);
      o->menu(menu_RC_Harm_Opti);
    } // RKR_Choice* RC_Ring_Opti
    AUDIO_SET->end();
  } // Fl_Group* AUDIO_SET
  { QUALITY_SET = new Fl_Group(5, 26, 518, 554, "Quality");
    QUALITY_SET->box(FL_DOWN_FRAME);
    QUALITY_SET->labelfont(1);
    QUALITY_SET->labelcolor(FL_BACKGROUND2_COLOR);
    QUALITY_SET->align(Fl_Align(FL_ALIGN_LEFT));
    QUALITY_SET->hide();
    { Fondo12 = new Fl_Box(5, 26, 518, 554);
    } // Fl_Box* Fondo12
    { RKR_Box* o = Har_Q_Label = new RKR_Box(30, 49, 136, 18, "Harmonizer Quality");
      Har_Q_Label->box(FL_NO_BOX);
      Har_Q_Label->color(FL_BACKGROUND_COLOR);
      Har_Q_Label->selection_color(FL_BACKGROUND_COLOR);
      Har_Q_Label->labeltype(FL_NORMAL_LABEL);
      Har_Q_Label->labelfont(0);
      Har_Q_Label->labelsize(12);
      Har_Q_Label->labelcolor(FL_FOREGROUND_COLOR);
      Har_Q_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Har_Q_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Har_Q_Label
    { Har_Qual = new RKR_Choice(156, 49, 47, 18);
      Har_Qual->box(FL_FLAT_BOX);
      Har_Qual->down_box(FL_BORDER_BOX);
      Har_Qual->color(FL_BACKGROUND_COLOR);
      Har_Qual->selection_color(FL_SELECTION_COLOR);
      Har_Qual->labeltype(FL_NORMAL_LABEL);
      Har_Qual->labelfont(0);
      Har_Qual->labelsize(10);
      Har_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Qual->textsize(10);
      Har_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Har_Qual->callback((Fl_Callback*)cb_Har_Qual);
      Har_Qual->align(Fl_Align(FL_ALIGN_RIGHT));
      Har_Qual->when(FL_WHEN_RELEASE);
      Har_Qual->menu(menu_Har_Qual);
    } // RKR_Choice* Har_Qual
    { RKR_Choice* o = Seq_Qual = new RKR_Choice(230, 49, 47, 18, "Sequence Quality");
      Seq_Qual->box(FL_FLAT_BOX);
      Seq_Qual->down_box(FL_BORDER_BOX);
      Seq_Qual->color(FL_BACKGROUND_COLOR);
      Seq_Qual->selection_color(FL_SELECTION_COLOR);
      Seq_Qual->labeltype(FL_NORMAL_LABEL);
      Seq_Qual->labelfont(0);
      Seq_Qual->labelsize(12);
      Seq_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Seq_Qual->textsize(10);
      Seq_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Seq_Qual->callback((Fl_Callback*)cb_Seq_Qual);
      Seq_Qual->align(Fl_Align(FL_ALIGN_RIGHT));
      Seq_Qual->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
      o->menu(menu_Har_Qual);
    } // RKR_Choice* Seq_Qual
    { RKR_Box* o = Sharm_Q_Label = new RKR_Box(30, 76, 136, 18, "StereoHarm Quality");
      Sharm_Q_Label->box(FL_NO_BOX);
      Sharm_Q_Label->color(FL_BACKGROUND_COLOR);
      Sharm_Q_Label->selection_color(FL_BACKGROUND_COLOR);
      Sharm_Q_Label->labeltype(FL_NORMAL_LABEL);
      Sharm_Q_Label->labelfont(0);
      Sharm_Q_Label->labelsize(12);
      Sharm_Q_Label->labelcolor(FL_FOREGROUND_COLOR);
      Sharm_Q_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Sharm_Q_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Sharm_Q_Label
    { RKR_Choice* o = Ste_Qual = new RKR_Choice(156, 76, 47, 18);
      Ste_Qual->box(FL_FLAT_BOX);
      Ste_Qual->down_box(FL_BORDER_BOX);
      Ste_Qual->color(FL_BACKGROUND_COLOR);
      Ste_Qual->selection_color(FL_SELECTION_COLOR);
      Ste_Qual->labeltype(FL_NORMAL_LABEL);
      Ste_Qual->labelfont(0);
      Ste_Qual->labelsize(12);
      Ste_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Qual->textsize(10);
      Ste_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Qual->callback((Fl_Callback*)cb_Ste_Qual);
      Ste_Qual->align(Fl_Align(FL_ALIGN_RIGHT));
      Ste_Qual->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
      o->menu(menu_Har_Qual);
    } // RKR_Choice* Ste_Qual
    { RKR_Choice* o = Shi_Qual = new RKR_Choice(230, 76, 47, 18, "Shifter Quality");
      Shi_Qual->box(FL_FLAT_BOX);
      Shi_Qual->down_box(FL_BORDER_BOX);
      Shi_Qual->color(FL_BACKGROUND_COLOR);
      Shi_Qual->selection_color(FL_SELECTION_COLOR);
      Shi_Qual->labeltype(FL_NORMAL_LABEL);
      Shi_Qual->labelfont(0);
      Shi_Qual->labelsize(12);
      Shi_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Shi_Qual->textsize(10);
      Shi_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Shi_Qual->callback((Fl_Callback*)cb_Shi_Qual);
      Shi_Qual->align(Fl_Align(FL_ALIGN_RIGHT));
      Shi_Qual->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
      o->menu(menu_Har_Qual);
    } // RKR_Choice* Shi_Qual
    { RKR_Box* o = Voc_Band_Label = new RKR_Box(30, 104, 136, 18, "Vocoder Bands");
      Voc_Band_Label->box(FL_NO_BOX);
      Voc_Band_Label->color(FL_BACKGROUND_COLOR);
      Voc_Band_Label->selection_color(FL_BACKGROUND_COLOR);
      Voc_Band_Label->labeltype(FL_NORMAL_LABEL);
      Voc_Band_Label->labelfont(0);
      Voc_Band_Label->labelsize(12);
      Voc_Band_Label->labelcolor(FL_FOREGROUND_COLOR);
      Voc_Band_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Voc_Band_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Voc_Band_Label
    { Voc_Bands = new RKR_Choice(156, 104, 47, 18);
      Voc_Bands->box(FL_FLAT_BOX);
      Voc_Bands->down_box(FL_BORDER_BOX);
      Voc_Bands->color(FL_BACKGROUND_COLOR);
      Voc_Bands->selection_color(FL_SELECTION_COLOR);
      Voc_Bands->labeltype(FL_NORMAL_LABEL);
      Voc_Bands->labelfont(0);
      Voc_Bands->labelsize(10);
      Voc_Bands->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Bands->textsize(10);
      Voc_Bands->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Bands->callback((Fl_Callback*)cb_Voc_Bands);
      Voc_Bands->align(Fl_Align(FL_ALIGN_RIGHT));
      Voc_Bands->when(FL_WHEN_RELEASE);
      Voc_Bands->menu(menu_Voc_Bands);
    } // RKR_Choice* Voc_Bands
    { RKR_Box* o = Harm_Label = new RKR_Box(30, 140, 156, 18, "Harmonizer Downsample");
      Harm_Label->box(FL_NO_BOX);
      Harm_Label->color(FL_BACKGROUND_COLOR);
      Harm_Label->selection_color(FL_BACKGROUND_COLOR);
      Harm_Label->labeltype(FL_NORMAL_LABEL);
      Harm_Label->labelfont(0);
      Harm_Label->labelsize(12);
      Harm_Label->labelcolor(FL_FOREGROUND_COLOR);
      Harm_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Harm_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Harm_Label
    { Har_Downsample = new RKR_Choice(205, 140, 70, 18);
      Har_Downsample->box(FL_FLAT_BOX);
      Har_Downsample->down_box(FL_BORDER_BOX);
      Har_Downsample->color(FL_BACKGROUND_COLOR);
      Har_Downsample->selection_color(FL_SELECTION_COLOR);
      Har_Downsample->labeltype(FL_NORMAL_LABEL);
      Har_Downsample->labelfont(0);
      Har_Downsample->labelsize(10);
      Har_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Downsample->textsize(10);
      Har_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Har_Downsample->callback((Fl_Callback*)cb_Har_Downsample);
      Har_Downsample->align(Fl_Align(FL_ALIGN_LEFT));
      Har_Downsample->when(FL_WHEN_RELEASE);
      Har_Downsample->menu(menu_Har_Downsample);
    } // RKR_Choice* Har_Downsample
    { RKR_Choice* o = Har_Down_Qua = new RKR_Choice(315, 140, 72, 18, "Down");
      Har_Down_Qua->box(FL_FLAT_BOX);
      Har_Down_Qua->down_box(FL_BORDER_BOX);
      Har_Down_Qua->color(FL_BACKGROUND_COLOR);
      Har_Down_Qua->selection_color(FL_SELECTION_COLOR);
      Har_Down_Qua->labeltype(FL_NORMAL_LABEL);
      Har_Down_Qua->labelfont(0);
      Har_Down_Qua->labelsize(11);
      Har_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Down_Qua->textsize(10);
      Har_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Har_Down_Qua->callback((Fl_Callback*)cb_Har_Down_Qua);
      Har_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Har_Down_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Har_Down_Qua
    { RKR_Choice* o = Har_Up_Qua = new RKR_Choice(415, 140, 72, 18, "Up");
      Har_Up_Qua->box(FL_FLAT_BOX);
      Har_Up_Qua->down_box(FL_BORDER_BOX);
      Har_Up_Qua->color(FL_BACKGROUND_COLOR);
      Har_Up_Qua->selection_color(FL_SELECTION_COLOR);
      Har_Up_Qua->labeltype(FL_NORMAL_LABEL);
      Har_Up_Qua->labelfont(0);
      Har_Up_Qua->labelsize(11);
      Har_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Up_Qua->textsize(10);
      Har_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Har_Up_Qua->callback((Fl_Callback*)cb_Har_Up_Qua);
      Har_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Har_Up_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Har_Up_Qua
    { RKR_Box* o = Rev_Label = new RKR_Box(30, 170, 156, 18, "Reverbtron Downsample");
      Rev_Label->box(FL_NO_BOX);
      Rev_Label->color(FL_BACKGROUND_COLOR);
      Rev_Label->selection_color(FL_BACKGROUND_COLOR);
      Rev_Label->labeltype(FL_NORMAL_LABEL);
      Rev_Label->labelfont(0);
      Rev_Label->labelsize(12);
      Rev_Label->labelcolor(FL_FOREGROUND_COLOR);
      Rev_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Rev_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Rev_Label
    { RKR_Choice* o = Rev_Downsample = new RKR_Choice(205, 170, 70, 18);
      Rev_Downsample->box(FL_FLAT_BOX);
      Rev_Downsample->down_box(FL_BORDER_BOX);
      Rev_Downsample->color(FL_BACKGROUND_COLOR);
      Rev_Downsample->selection_color(FL_SELECTION_COLOR);
      Rev_Downsample->labeltype(FL_NORMAL_LABEL);
      Rev_Downsample->labelfont(0);
      Rev_Downsample->labelsize(10);
      Rev_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Rev_Downsample->textsize(10);
      Rev_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Rev_Downsample->callback((Fl_Callback*)cb_Rev_Downsample);
      Rev_Downsample->align(Fl_Align(FL_ALIGN_LEFT));
      Rev_Downsample->when(FL_WHEN_RELEASE);
      o->menu(menu_Har_Downsample);
    } // RKR_Choice* Rev_Downsample
    { RKR_Choice* o = Rev_Down_Qua = new RKR_Choice(315, 170, 72, 18, "Down");
      Rev_Down_Qua->box(FL_FLAT_BOX);
      Rev_Down_Qua->down_box(FL_BORDER_BOX);
      Rev_Down_Qua->color(FL_BACKGROUND_COLOR);
      Rev_Down_Qua->selection_color(FL_SELECTION_COLOR);
      Rev_Down_Qua->labeltype(FL_NORMAL_LABEL);
      Rev_Down_Qua->labelfont(0);
      Rev_Down_Qua->labelsize(11);
      Rev_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Rev_Down_Qua->textsize(10);
      Rev_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Rev_Down_Qua->callback((Fl_Callback*)cb_Rev_Down_Qua);
      Rev_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Rev_Down_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Rev_Down_Qua
    { RKR_Choice* o = Rev_Up_Qua = new RKR_Choice(415, 170, 72, 18, "Up");
      Rev_Up_Qua->box(FL_FLAT_BOX);
      Rev_Up_Qua->down_box(FL_BORDER_BOX);
      Rev_Up_Qua->color(FL_BACKGROUND_COLOR);
      Rev_Up_Qua->selection_color(FL_SELECTION_COLOR);
      Rev_Up_Qua->labeltype(FL_NORMAL_LABEL);
      Rev_Up_Qua->labelfont(0);
      Rev_Up_Qua->labelsize(11);
      Rev_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Rev_Up_Qua->textsize(10);
      Rev_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Rev_Up_Qua->callback((Fl_Callback*)cb_Rev_Up_Qua);
      Rev_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Rev_Up_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Rev_Up_Qua
    { RKR_Box* o = con_Label = new RKR_Box(30, 200, 156, 18, "Convolotron Downsample");
      con_Label->box(FL_NO_BOX);
      con_Label->color(FL_BACKGROUND_COLOR);
      con_Label->selection_color(FL_BACKGROUND_COLOR);
      con_Label->labeltype(FL_NORMAL_LABEL);
      con_Label->labelfont(0);
      con_Label->labelsize(12);
      con_Label->labelcolor(FL_FOREGROUND_COLOR);
      con_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      con_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* con_Label
    { RKR_Choice* o = Con_Downsample = new RKR_Choice(205, 200, 70, 18);
      Con_Downsample->box(FL_FLAT_BOX);
      Con_Downsample->down_box(FL_BORDER_BOX);
      Con_Downsample->color(FL_BACKGROUND_COLOR);
      Con_Downsample->selection_color(FL_SELECTION_COLOR);
      Con_Downsample->labeltype(FL_NORMAL_LABEL);
      Con_Downsample->labelfont(0);
      Con_Downsample->labelsize(10);
      Con_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Con_Downsample->textsize(10);
      Con_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Con_Downsample->callback((Fl_Callback*)cb_Con_Downsample);
      Con_Downsample->align(Fl_Align(FL_ALIGN_LEFT));
      Con_Downsample->when(FL_WHEN_RELEASE);
      o->menu(menu_Har_Downsample);
    } // RKR_Choice* Con_Downsample
    { RKR_Choice* o = Con_Down_Qua = new RKR_Choice(315, 200, 72, 18, "Down");
      Con_Down_Qua->box(FL_FLAT_BOX);
      Con_Down_Qua->down_box(FL_BORDER_BOX);
      Con_Down_Qua->color(FL_BACKGROUND_COLOR);
      Con_Down_Qua->selection_color(FL_SELECTION_COLOR);
      Con_Down_Qua->labeltype(FL_NORMAL_LABEL);
      Con_Down_Qua->labelfont(0);
      Con_Down_Qua->labelsize(11);
      Con_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Con_Down_Qua->textsize(10);
      Con_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Con_Down_Qua->callback((Fl_Callback*)cb_Con_Down_Qua);
      Con_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Con_Down_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Con_Down_Qua
    { RKR_Choice* o = Con_Up_Qua = new RKR_Choice(415, 200, 72, 18, "Up");
      Con_Up_Qua->box(FL_FLAT_BOX);
      Con_Up_Qua->down_box(FL_BORDER_BOX);
      Con_Up_Qua->color(FL_BACKGROUND_COLOR);
      Con_Up_Qua->selection_color(FL_SELECTION_COLOR);
      Con_Up_Qua->labeltype(FL_NORMAL_LABEL);
      Con_Up_Qua->labelfont(0);
      Con_Up_Qua->labelsize(11);
      Con_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Con_Up_Qua->textsize(10);
      Con_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Con_Up_Qua->callback((Fl_Callback*)cb_Con_Up_Qua);
      Con_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Con_Up_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Con_Up_Qua
    { RKR_Box* o = seq_Label = new RKR_Box(30, 230, 156, 18, "Sequence Downsample");
      seq_Label->box(FL_NO_BOX);
      seq_Label->color(FL_BACKGROUND_COLOR);
      seq_Label->selection_color(FL_BACKGROUND_COLOR);
      seq_Label->labeltype(FL_NORMAL_LABEL);
      seq_Label->labelfont(0);
      seq_Label->labelsize(12);
      seq_Label->labelcolor(FL_FOREGROUND_COLOR);
      seq_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      seq_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* seq_Label
    { RKR_Choice* o = Seq_Downsample = new RKR_Choice(205, 230, 70, 18);
      Seq_Downsample->box(FL_FLAT_BOX);
      Seq_Downsample->down_box(FL_BORDER_BOX);
      Seq_Downsample->color(FL_BACKGROUND_COLOR);
      Seq_Downsample->selection_color(FL_SELECTION_COLOR);
      Seq_Downsample->labeltype(FL_NORMAL_LABEL);
      Seq_Downsample->labelfont(0);
      Seq_Downsample->labelsize(10);
      Seq_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Seq_Downsample->textsize(10);
      Seq_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Seq_Downsample->callback((Fl_Callback*)cb_Seq_Downsample);
      Seq_Downsample->align(Fl_Align(FL_ALIGN_LEFT));
      Seq_Downsample->when(FL_WHEN_RELEASE);
      o->menu(menu_Har_Downsample);
    } // RKR_Choice* Seq_Downsample
    { RKR_Choice* o = Seq_Down_Qua = new RKR_Choice(315, 230, 72, 18, "Down");
      Seq_Down_Qua->box(FL_FLAT_BOX);
      Seq_Down_Qua->down_box(FL_BORDER_BOX);
      Seq_Down_Qua->color(FL_BACKGROUND_COLOR);
      Seq_Down_Qua->selection_color(FL_SELECTION_COLOR);
      Seq_Down_Qua->labeltype(FL_NORMAL_LABEL);
      Seq_Down_Qua->labelfont(0);
      Seq_Down_Qua->labelsize(11);
      Seq_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Seq_Down_Qua->textsize(10);
      Seq_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Seq_Down_Qua->callback((Fl_Callback*)cb_Seq_Down_Qua);
      Seq_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Seq_Down_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Seq_Down_Qua
    { RKR_Choice* o = Seq_Up_Qua = new RKR_Choice(415, 230, 72, 18, "Up");
      Seq_Up_Qua->box(FL_FLAT_BOX);
      Seq_Up_Qua->down_box(FL_BORDER_BOX);
      Seq_Up_Qua->color(FL_BACKGROUND_COLOR);
      Seq_Up_Qua->selection_color(FL_SELECTION_COLOR);
      Seq_Up_Qua->labeltype(FL_NORMAL_LABEL);
      Seq_Up_Qua->labelfont(0);
      Seq_Up_Qua->labelsize(11);
      Seq_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Seq_Up_Qua->textsize(10);
      Seq_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Seq_Up_Qua->callback((Fl_Callback*)cb_Seq_Up_Qua);
      Seq_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Seq_Up_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Seq_Up_Qua
    { RKR_Box* o = shi_Label = new RKR_Box(30, 260, 156, 18, "Shifter Downsample");
      shi_Label->box(FL_NO_BOX);
      shi_Label->color(FL_BACKGROUND_COLOR);
      shi_Label->selection_color(FL_BACKGROUND_COLOR);
      shi_Label->labeltype(FL_NORMAL_LABEL);
      shi_Label->labelfont(0);
      shi_Label->labelsize(12);
      shi_Label->labelcolor(FL_FOREGROUND_COLOR);
      shi_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      shi_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* shi_Label
    { RKR_Choice* o = Shi_Downsample = new RKR_Choice(205, 260, 70, 18);
      Shi_Downsample->box(FL_FLAT_BOX);
      Shi_Downsample->down_box(FL_BORDER_BOX);
      Shi_Downsample->color(FL_BACKGROUND_COLOR);
      Shi_Downsample->selection_color(FL_SELECTION_COLOR);
      Shi_Downsample->labeltype(FL_NORMAL_LABEL);
      Shi_Downsample->labelfont(0);
      Shi_Downsample->labelsize(10);
      Shi_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Shi_Downsample->textsize(10);
      Shi_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Shi_Downsample->callback((Fl_Callback*)cb_Shi_Downsample);
      Shi_Downsample->align(Fl_Align(FL_ALIGN_LEFT));
      Shi_Downsample->when(FL_WHEN_RELEASE);
      o->menu(menu_Har_Downsample);
    } // RKR_Choice* Shi_Downsample
    { RKR_Choice* o = Shi_Down_Qua = new RKR_Choice(315, 260, 72, 18, "Down");
      Shi_Down_Qua->box(FL_FLAT_BOX);
      Shi_Down_Qua->down_box(FL_BORDER_BOX);
      Shi_Down_Qua->color(FL_BACKGROUND_COLOR);
      Shi_Down_Qua->selection_color(FL_SELECTION_COLOR);
      Shi_Down_Qua->labeltype(FL_NORMAL_LABEL);
      Shi_Down_Qua->labelfont(0);
      Shi_Down_Qua->labelsize(11);
      Shi_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Shi_Down_Qua->textsize(10);
      Shi_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Shi_Down_Qua->callback((Fl_Callback*)cb_Shi_Down_Qua);
      Shi_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Shi_Down_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Shi_Down_Qua
    { RKR_Choice* o = Shi_Up_Qua = new RKR_Choice(415, 260, 72, 18, "Up");
      Shi_Up_Qua->box(FL_FLAT_BOX);
      Shi_Up_Qua->down_box(FL_BORDER_BOX);
      Shi_Up_Qua->color(FL_BACKGROUND_COLOR);
      Shi_Up_Qua->selection_color(FL_SELECTION_COLOR);
      Shi_Up_Qua->labeltype(FL_NORMAL_LABEL);
      Shi_Up_Qua->labelfont(0);
      Shi_Up_Qua->labelsize(11);
      Shi_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Shi_Up_Qua->textsize(10);
      Shi_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Shi_Up_Qua->callback((Fl_Callback*)cb_Shi_Up_Qua);
      Shi_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Shi_Up_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Shi_Up_Qua
    { RKR_Box* o = Voc_Label = new RKR_Box(30, 290, 156, 18, "Vocoder Downsample");
      Voc_Label->box(FL_NO_BOX);
      Voc_Label->color(FL_BACKGROUND_COLOR);
      Voc_Label->selection_color(FL_BACKGROUND_COLOR);
      Voc_Label->labeltype(FL_NORMAL_LABEL);
      Voc_Label->labelfont(0);
      Voc_Label->labelsize(12);
      Voc_Label->labelcolor(FL_FOREGROUND_COLOR);
      Voc_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Voc_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Voc_Label
    { RKR_Choice* o = Voc_Downsample = new RKR_Choice(205, 290, 70, 18);
      Voc_Downsample->box(FL_FLAT_BOX);
      Voc_Downsample->down_box(FL_BORDER_BOX);
      Voc_Downsample->color(FL_BACKGROUND_COLOR);
      Voc_Downsample->selection_color(FL_SELECTION_COLOR);
      Voc_Downsample->labeltype(FL_NORMAL_LABEL);
      Voc_Downsample->labelfont(0);
      Voc_Downsample->labelsize(10);
      Voc_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Downsample->textsize(10);
      Voc_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Downsample->callback((Fl_Callback*)cb_Voc_Downsample);
      Voc_Downsample->align(Fl_Align(FL_ALIGN_LEFT));
      Voc_Downsample->when(FL_WHEN_RELEASE);
      o->menu(menu_Har_Downsample);
    } // RKR_Choice* Voc_Downsample
    { RKR_Choice* o = Voc_Down_Qua = new RKR_Choice(315, 290, 72, 18, "Down");
      Voc_Down_Qua->box(FL_FLAT_BOX);
      Voc_Down_Qua->down_box(FL_BORDER_BOX);
      Voc_Down_Qua->color(FL_BACKGROUND_COLOR);
      Voc_Down_Qua->selection_color(FL_SELECTION_COLOR);
      Voc_Down_Qua->labeltype(FL_NORMAL_LABEL);
      Voc_Down_Qua->labelfont(0);
      Voc_Down_Qua->labelsize(11);
      Voc_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Down_Qua->textsize(10);
      Voc_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Down_Qua->callback((Fl_Callback*)cb_Voc_Down_Qua);
      Voc_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Voc_Down_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Voc_Down_Qua
    { RKR_Choice* o = Voc_Up_Qua = new RKR_Choice(415, 290, 72, 18, "Up");
      Voc_Up_Qua->box(FL_FLAT_BOX);
      Voc_Up_Qua->down_box(FL_BORDER_BOX);
      Voc_Up_Qua->color(FL_BACKGROUND_COLOR);
      Voc_Up_Qua->selection_color(FL_SELECTION_COLOR);
      Voc_Up_Qua->labeltype(FL_NORMAL_LABEL);
      Voc_Up_Qua->labelfont(0);
      Voc_Up_Qua->labelsize(11);
      Voc_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Up_Qua->textsize(10);
      Voc_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Up_Qua->callback((Fl_Callback*)cb_Voc_Up_Qua);
      Voc_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Voc_Up_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Voc_Up_Qua
    { RKR_Box* o = Ste_Label = new RKR_Box(30, 320, 156, 18, "StereoHarm Downsample");
      Ste_Label->box(FL_NO_BOX);
      Ste_Label->color(FL_BACKGROUND_COLOR);
      Ste_Label->selection_color(FL_BACKGROUND_COLOR);
      Ste_Label->labeltype(FL_NORMAL_LABEL);
      Ste_Label->labelfont(0);
      Ste_Label->labelsize(12);
      Ste_Label->labelcolor(FL_FOREGROUND_COLOR);
      Ste_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      Ste_Label->when(FL_WHEN_NEVER);
      o->set_label_offset(2);
    } // RKR_Box* Ste_Label
    { RKR_Choice* o = Ste_Downsample = new RKR_Choice(205, 320, 70, 18);
      Ste_Downsample->box(FL_FLAT_BOX);
      Ste_Downsample->down_box(FL_BORDER_BOX);
      Ste_Downsample->color(FL_BACKGROUND_COLOR);
      Ste_Downsample->selection_color(FL_SELECTION_COLOR);
      Ste_Downsample->labeltype(FL_NORMAL_LABEL);
      Ste_Downsample->labelfont(0);
      Ste_Downsample->labelsize(10);
      Ste_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Downsample->textsize(10);
      Ste_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Downsample->callback((Fl_Callback*)cb_Ste_Downsample);
      Ste_Downsample->align(Fl_Align(FL_ALIGN_LEFT));
      Ste_Downsample->when(FL_WHEN_RELEASE);
      o->menu(menu_Har_Downsample);
    } // RKR_Choice* Ste_Downsample
    { RKR_Choice* o = Ste_Down_Qua = new RKR_Choice(315, 320, 72, 18, "Down");
      Ste_Down_Qua->box(FL_FLAT_BOX);
      Ste_Down_Qua->down_box(FL_BORDER_BOX);
      Ste_Down_Qua->color(FL_BACKGROUND_COLOR);
      Ste_Down_Qua->selection_color(FL_SELECTION_COLOR);
      Ste_Down_Qua->labeltype(FL_NORMAL_LABEL);
      Ste_Down_Qua->labelfont(0);
      Ste_Down_Qua->labelsize(11);
      Ste_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Down_Qua->textsize(10);
      Ste_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Down_Qua->callback((Fl_Callback*)cb_Ste_Down_Qua);
      Ste_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Ste_Down_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Ste_Down_Qua
    { RKR_Choice* o = Ste_Up_Qua = new RKR_Choice(415, 320, 72, 18, "Up");
      Ste_Up_Qua->box(FL_FLAT_BOX);
      Ste_Up_Qua->down_box(FL_BORDER_BOX);
      Ste_Up_Qua->color(FL_BACKGROUND_COLOR);
      Ste_Up_Qua->selection_color(FL_SELECTION_COLOR);
      Ste_Up_Qua->labeltype(FL_NORMAL_LABEL);
      Ste_Up_Qua->labelfont(0);
      Ste_Up_Qua->labelsize(11);
      Ste_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Up_Qua->textsize(10);
      Ste_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Up_Qua->callback((Fl_Callback*)cb_Ste_Up_Qua);
      Ste_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
      Ste_Up_Qua->when(FL_WHEN_RELEASE);
      o->menu(menu_Upr_Qual);
      o->set_label_offset(1);
    } // RKR_Choice* Ste_Up_Qua
    { RKR_Group* o = Wave_Resample = new RKR_Group(30, 370, 470, 164, "Waveshape Resampling");
      Wave_Resample->box(FL_DOWN_FRAME);
      Wave_Resample->color(FL_BACKGROUND_COLOR);
      Wave_Resample->selection_color(FL_BACKGROUND_COLOR);
      Wave_Resample->labeltype(FL_NORMAL_LABEL);
      Wave_Resample->labelfont(0);
      Wave_Resample->labelsize(14);
      Wave_Resample->labelcolor(FL_BACKGROUND2_COLOR);
      Wave_Resample->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      Wave_Resample->when(FL_WHEN_RELEASE);
      { RKR_Box* o = Dist_Label = new RKR_Box(45, 400, 156, 18, "Distortion Resampling");
        Dist_Label->box(FL_NO_BOX);
        Dist_Label->color(FL_BACKGROUND_COLOR);
        Dist_Label->selection_color(FL_BACKGROUND_COLOR);
        Dist_Label->labeltype(FL_NORMAL_LABEL);
        Dist_Label->labelfont(0);
        Dist_Label->labelsize(12);
        Dist_Label->labelcolor(FL_BACKGROUND2_COLOR);
        Dist_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Dist_Label->when(FL_WHEN_NEVER);
        o->set_label_offset(2);
      } // RKR_Box* Dist_Label
      { Dist_Amo = new RKR_Choice(195, 400, 70, 18);
        Dist_Amo->box(FL_FLAT_BOX);
        Dist_Amo->down_box(FL_BORDER_BOX);
        Dist_Amo->color(FL_BACKGROUND_COLOR);
        Dist_Amo->selection_color((Fl_Color)137);
        Dist_Amo->labeltype(FL_NORMAL_LABEL);
        Dist_Amo->labelfont(0);
        Dist_Amo->labelsize(10);
        Dist_Amo->labelcolor(FL_BACKGROUND2_COLOR);
        Dist_Amo->textsize(10);
        Dist_Amo->textcolor(FL_BACKGROUND2_COLOR);
        Dist_Amo->callback((Fl_Callback*)cb_Dist_Amo);
        Dist_Amo->align(Fl_Align(FL_ALIGN_LEFT));
        Dist_Amo->when(FL_WHEN_RELEASE);
        Dist_Amo->menu(menu_Dist_Amo);
      } // RKR_Choice* Dist_Amo
      { RKR_Choice* o = Dist_Down_Qua = new RKR_Choice(305, 400, 72, 18, "Down");
        Dist_Down_Qua->box(FL_FLAT_BOX);
        Dist_Down_Qua->down_box(FL_BORDER_BOX);
        Dist_Down_Qua->color(FL_BACKGROUND_COLOR);
        Dist_Down_Qua->selection_color(FL_SELECTION_COLOR);
        Dist_Down_Qua->labeltype(FL_NORMAL_LABEL);
        Dist_Down_Qua->labelfont(0);
        Dist_Down_Qua->labelsize(11);
        Dist_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Dist_Down_Qua->textsize(10);
        Dist_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Dist_Down_Qua->callback((Fl_Callback*)cb_Dist_Down_Qua);
        Dist_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Dist_Down_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Dist_Down_Qua
      { RKR_Choice* o = Dist_Up_Qua = new RKR_Choice(405, 400, 72, 18, "Up");
        Dist_Up_Qua->box(FL_FLAT_BOX);
        Dist_Up_Qua->down_box(FL_BORDER_BOX);
        Dist_Up_Qua->color(FL_BACKGROUND_COLOR);
        Dist_Up_Qua->selection_color(FL_SELECTION_COLOR);
        Dist_Up_Qua->labeltype(FL_NORMAL_LABEL);
        Dist_Up_Qua->labelfont(0);
        Dist_Up_Qua->labelsize(11);
        Dist_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Dist_Up_Qua->textsize(10);
        Dist_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Dist_Up_Qua->callback((Fl_Callback*)cb_Dist_Up_Qua);
        Dist_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Dist_Up_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Dist_Up_Qua
      { RKR_Box* o = Ovrd_Label = new RKR_Box(45, 425, 156, 18, "Overdrive Resampling");
        Ovrd_Label->box(FL_NO_BOX);
        Ovrd_Label->color(FL_BACKGROUND_COLOR);
        Ovrd_Label->selection_color(FL_BACKGROUND_COLOR);
        Ovrd_Label->labeltype(FL_NORMAL_LABEL);
        Ovrd_Label->labelfont(0);
        Ovrd_Label->labelsize(12);
        Ovrd_Label->labelcolor(FL_BACKGROUND2_COLOR);
        Ovrd_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Ovrd_Label->when(FL_WHEN_NEVER);
        o->set_label_offset(2);
      } // RKR_Box* Ovrd_Label
      { RKR_Choice* o = Ovrd_Amo = new RKR_Choice(195, 425, 70, 18);
        Ovrd_Amo->box(FL_FLAT_BOX);
        Ovrd_Amo->down_box(FL_BORDER_BOX);
        Ovrd_Amo->color(FL_BACKGROUND_COLOR);
        Ovrd_Amo->selection_color(FL_SELECTION_COLOR);
        Ovrd_Amo->labeltype(FL_NORMAL_LABEL);
        Ovrd_Amo->labelfont(0);
        Ovrd_Amo->labelsize(10);
        Ovrd_Amo->labelcolor(FL_BACKGROUND2_COLOR);
        Ovrd_Amo->textsize(10);
        Ovrd_Amo->textcolor(FL_BACKGROUND2_COLOR);
        Ovrd_Amo->callback((Fl_Callback*)cb_Ovrd_Amo);
        Ovrd_Amo->align(Fl_Align(FL_ALIGN_LEFT));
        Ovrd_Amo->when(FL_WHEN_RELEASE);
        o->menu(menu_Dist_Amo);
      } // RKR_Choice* Ovrd_Amo
      { RKR_Choice* o = Ovrd_Down_Qua = new RKR_Choice(305, 425, 72, 18, "Down");
        Ovrd_Down_Qua->box(FL_FLAT_BOX);
        Ovrd_Down_Qua->down_box(FL_BORDER_BOX);
        Ovrd_Down_Qua->color(FL_BACKGROUND_COLOR);
        Ovrd_Down_Qua->selection_color(FL_SELECTION_COLOR);
        Ovrd_Down_Qua->labeltype(FL_NORMAL_LABEL);
        Ovrd_Down_Qua->labelfont(0);
        Ovrd_Down_Qua->labelsize(11);
        Ovrd_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Ovrd_Down_Qua->textsize(10);
        Ovrd_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Ovrd_Down_Qua->callback((Fl_Callback*)cb_Ovrd_Down_Qua);
        Ovrd_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Ovrd_Down_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Ovrd_Down_Qua
      { RKR_Choice* o = Ovrd_Up_Qua = new RKR_Choice(405, 425, 72, 18, "Up");
        Ovrd_Up_Qua->box(FL_FLAT_BOX);
        Ovrd_Up_Qua->down_box(FL_BORDER_BOX);
        Ovrd_Up_Qua->color(FL_BACKGROUND_COLOR);
        Ovrd_Up_Qua->selection_color(FL_SELECTION_COLOR);
        Ovrd_Up_Qua->labeltype(FL_NORMAL_LABEL);
        Ovrd_Up_Qua->labelfont(0);
        Ovrd_Up_Qua->labelsize(11);
        Ovrd_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Ovrd_Up_Qua->textsize(10);
        Ovrd_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Ovrd_Up_Qua->callback((Fl_Callback*)cb_Ovrd_Up_Qua);
        Ovrd_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Ovrd_Up_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Ovrd_Up_Qua
      { RKR_Box* o = Dere_Label = new RKR_Box(45, 450, 156, 18, "Derelict Resampling");
        Dere_Label->box(FL_NO_BOX);
        Dere_Label->color(FL_BACKGROUND_COLOR);
        Dere_Label->selection_color(FL_BACKGROUND_COLOR);
        Dere_Label->labeltype(FL_NORMAL_LABEL);
        Dere_Label->labelfont(0);
        Dere_Label->labelsize(12);
        Dere_Label->labelcolor(FL_BACKGROUND2_COLOR);
        Dere_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Dere_Label->when(FL_WHEN_NEVER);
        o->set_label_offset(2);
      } // RKR_Box* Dere_Label
      { RKR_Choice* o = Dere_Amo = new RKR_Choice(195, 450, 70, 18);
        Dere_Amo->box(FL_FLAT_BOX);
        Dere_Amo->down_box(FL_BORDER_BOX);
        Dere_Amo->color(FL_BACKGROUND_COLOR);
        Dere_Amo->selection_color(FL_SELECTION_COLOR);
        Dere_Amo->labeltype(FL_NORMAL_LABEL);
        Dere_Amo->labelfont(0);
        Dere_Amo->labelsize(10);
        Dere_Amo->labelcolor(FL_BACKGROUND2_COLOR);
        Dere_Amo->textsize(10);
        Dere_Amo->textcolor(FL_BACKGROUND2_COLOR);
        Dere_Amo->callback((Fl_Callback*)cb_Dere_Amo);
        Dere_Amo->align(Fl_Align(FL_ALIGN_LEFT));
        Dere_Amo->when(FL_WHEN_RELEASE);
        o->menu(menu_Dist_Amo);
      } // RKR_Choice* Dere_Amo
      { RKR_Choice* o = Dere_Down_Qua = new RKR_Choice(305, 450, 72, 18, "Down");
        Dere_Down_Qua->box(FL_FLAT_BOX);
        Dere_Down_Qua->down_box(FL_BORDER_BOX);
        Dere_Down_Qua->color(FL_BACKGROUND_COLOR);
        Dere_Down_Qua->selection_color(FL_SELECTION_COLOR);
        Dere_Down_Qua->labeltype(FL_NORMAL_LABEL);
        Dere_Down_Qua->labelfont(0);
        Dere_Down_Qua->labelsize(11);
        Dere_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Dere_Down_Qua->textsize(10);
        Dere_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Dere_Down_Qua->callback((Fl_Callback*)cb_Dere_Down_Qua);
        Dere_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Dere_Down_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Dere_Down_Qua
      { RKR_Choice* o = Dere_Up_Qua = new RKR_Choice(405, 450, 72, 18, "Up");
        Dere_Up_Qua->box(FL_FLAT_BOX);
        Dere_Up_Qua->down_box(FL_BORDER_BOX);
        Dere_Up_Qua->color(FL_BACKGROUND_COLOR);
        Dere_Up_Qua->selection_color(FL_SELECTION_COLOR);
        Dere_Up_Qua->labeltype(FL_NORMAL_LABEL);
        Dere_Up_Qua->labelfont(0);
        Dere_Up_Qua->labelsize(11);
        Dere_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Dere_Up_Qua->textsize(10);
        Dere_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Dere_Up_Qua->callback((Fl_Callback*)cb_Dere_Up_Qua);
        Dere_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Dere_Up_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Dere_Up_Qua
      { RKR_Box* o = DBand_Label = new RKR_Box(45, 475, 156, 18, "DistBand Resampling");
        DBand_Label->box(FL_NO_BOX);
        DBand_Label->color(FL_BACKGROUND_COLOR);
        DBand_Label->selection_color(FL_BACKGROUND_COLOR);
        DBand_Label->labeltype(FL_NORMAL_LABEL);
        DBand_Label->labelfont(0);
        DBand_Label->labelsize(12);
        DBand_Label->labelcolor(FL_BACKGROUND2_COLOR);
        DBand_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        DBand_Label->when(FL_WHEN_NEVER);
        o->set_label_offset(2);
      } // RKR_Box* DBand_Label
      { RKR_Choice* o = DBand_Amo = new RKR_Choice(195, 475, 70, 18);
        DBand_Amo->box(FL_FLAT_BOX);
        DBand_Amo->down_box(FL_BORDER_BOX);
        DBand_Amo->color(FL_BACKGROUND_COLOR);
        DBand_Amo->selection_color(FL_SELECTION_COLOR);
        DBand_Amo->labeltype(FL_NORMAL_LABEL);
        DBand_Amo->labelfont(0);
        DBand_Amo->labelsize(10);
        DBand_Amo->labelcolor(FL_BACKGROUND2_COLOR);
        DBand_Amo->textsize(10);
        DBand_Amo->textcolor(FL_BACKGROUND2_COLOR);
        DBand_Amo->callback((Fl_Callback*)cb_DBand_Amo);
        DBand_Amo->align(Fl_Align(FL_ALIGN_LEFT));
        DBand_Amo->when(FL_WHEN_RELEASE);
        o->menu(menu_Dist_Amo);
      } // RKR_Choice* DBand_Amo
      { RKR_Choice* o = DBand_Down_Qua = new RKR_Choice(305, 475, 72, 18, "Down");
        DBand_Down_Qua->box(FL_FLAT_BOX);
        DBand_Down_Qua->down_box(FL_BORDER_BOX);
        DBand_Down_Qua->color(FL_BACKGROUND_COLOR);
        DBand_Down_Qua->selection_color(FL_SELECTION_COLOR);
        DBand_Down_Qua->labeltype(FL_NORMAL_LABEL);
        DBand_Down_Qua->labelfont(0);
        DBand_Down_Qua->labelsize(11);
        DBand_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        DBand_Down_Qua->textsize(10);
        DBand_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
        DBand_Down_Qua->callback((Fl_Callback*)cb_DBand_Down_Qua);
        DBand_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        DBand_Down_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* DBand_Down_Qua
      { RKR_Choice* o = DBand_Up_Qua = new RKR_Choice(405, 475, 72, 18, "Up");
        DBand_Up_Qua->box(FL_FLAT_BOX);
        DBand_Up_Qua->down_box(FL_BORDER_BOX);
        DBand_Up_Qua->color(FL_BACKGROUND_COLOR);
        DBand_Up_Qua->selection_color(FL_SELECTION_COLOR);
        DBand_Up_Qua->labeltype(FL_NORMAL_LABEL);
        DBand_Up_Qua->labelfont(0);
        DBand_Up_Qua->labelsize(11);
        DBand_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        DBand_Up_Qua->textsize(10);
        DBand_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
        DBand_Up_Qua->callback((Fl_Callback*)cb_DBand_Up_Qua);
        DBand_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        DBand_Up_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* DBand_Up_Qua
      { RKR_Box* o = Stomp_Label = new RKR_Box(45, 500, 156, 18, "StompBox Resampling");
        Stomp_Label->box(FL_NO_BOX);
        Stomp_Label->color(FL_BACKGROUND_COLOR);
        Stomp_Label->selection_color(FL_BACKGROUND_COLOR);
        Stomp_Label->labeltype(FL_NORMAL_LABEL);
        Stomp_Label->labelfont(0);
        Stomp_Label->labelsize(12);
        Stomp_Label->labelcolor(FL_BACKGROUND2_COLOR);
        Stomp_Label->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Stomp_Label->when(FL_WHEN_NEVER);
        o->set_label_offset(2);
      } // RKR_Box* Stomp_Label
      { RKR_Choice* o = Stomp_Amo = new RKR_Choice(195, 500, 70, 18);
        Stomp_Amo->box(FL_FLAT_BOX);
        Stomp_Amo->down_box(FL_BORDER_BOX);
        Stomp_Amo->color(FL_BACKGROUND_COLOR);
        Stomp_Amo->selection_color(FL_SELECTION_COLOR);
        Stomp_Amo->labeltype(FL_NORMAL_LABEL);
        Stomp_Amo->labelfont(0);
        Stomp_Amo->labelsize(10);
        Stomp_Amo->labelcolor(FL_BACKGROUND2_COLOR);
        Stomp_Amo->textsize(10);
        Stomp_Amo->textcolor(FL_BACKGROUND2_COLOR);
        Stomp_Amo->callback((Fl_Callback*)cb_Stomp_Amo);
        Stomp_Amo->align(Fl_Align(FL_ALIGN_LEFT));
        Stomp_Amo->when(FL_WHEN_RELEASE);
        o->menu(menu_Dist_Amo);
      } // RKR_Choice* Stomp_Amo
      { RKR_Choice* o = Stomp_Down_Qua = new RKR_Choice(305, 500, 72, 18, "Down");
        Stomp_Down_Qua->box(FL_FLAT_BOX);
        Stomp_Down_Qua->down_box(FL_BORDER_BOX);
        Stomp_Down_Qua->color(FL_BACKGROUND_COLOR);
        Stomp_Down_Qua->selection_color(FL_SELECTION_COLOR);
        Stomp_Down_Qua->labeltype(FL_NORMAL_LABEL);
        Stomp_Down_Qua->labelfont(0);
        Stomp_Down_Qua->labelsize(11);
        Stomp_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Stomp_Down_Qua->textsize(10);
        Stomp_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Stomp_Down_Qua->callback((Fl_Callback*)cb_Stomp_Down_Qua);
        Stomp_Down_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Stomp_Down_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Stomp_Down_Qua
      { RKR_Choice* o = Stomp_Up_Qua = new RKR_Choice(405, 500, 72, 18, "Up");
        Stomp_Up_Qua->box(FL_FLAT_BOX);
        Stomp_Up_Qua->down_box(FL_BORDER_BOX);
        Stomp_Up_Qua->color(FL_BACKGROUND_COLOR);
        Stomp_Up_Qua->selection_color(FL_SELECTION_COLOR);
        Stomp_Up_Qua->labeltype(FL_NORMAL_LABEL);
        Stomp_Up_Qua->labelfont(0);
        Stomp_Up_Qua->labelsize(11);
        Stomp_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
        Stomp_Up_Qua->textsize(10);
        Stomp_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
        Stomp_Up_Qua->callback((Fl_Callback*)cb_Stomp_Up_Qua);
        Stomp_Up_Qua->align(Fl_Align(FL_ALIGN_LEFT));
        Stomp_Up_Qua->when(FL_WHEN_RELEASE);
        o->menu(menu_Upr_Qual);
        o->set_label_offset(1);
      } // RKR_Choice* Stomp_Up_Qua
      o->set_label_offset(4);
      Wave_Resample->end();
    } // RKR_Group* Wave_Resample
    QUALITY_SET->end();
  } // Fl_Group* QUALITY_SET
  { MIDI_SET = new Fl_Group(5, 26, 518, 554, "MIDI");
    MIDI_SET->box(FL_DOWN_FRAME);
    MIDI_SET->labelfont(1);
    MIDI_SET->labelcolor(FL_BACKGROUND2_COLOR);
    MIDI_SET->align(Fl_Align(FL_ALIGN_LEFT));
    MIDI_SET->hide();
    { Fondo8 = new Fl_Box(5, 26, 518, 554);
    } // Fl_Box* Fondo8
    { RKR_Check_Button* o = D_A_Connect = new RKR_Check_Button(30, 38, 153, 16, "Auto Connect MIDI In");
      D_A_Connect->box(FL_NO_BOX);
      D_A_Connect->down_box(FL_DOWN_BOX);
      D_A_Connect->color(FL_BACKGROUND_COLOR);
      D_A_Connect->selection_color(FL_FOREGROUND_COLOR);
      D_A_Connect->labeltype(FL_NORMAL_LABEL);
      D_A_Connect->labelfont(0);
      D_A_Connect->labelsize(12);
      D_A_Connect->labelcolor(FL_BACKGROUND2_COLOR);
      D_A_Connect->callback((Fl_Callback*)cb_D_A_Connect);
      D_A_Connect->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      D_A_Connect->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* D_A_Connect
    { BMidiIn = new RKR_Browser(30, 83, 190, 111, "ALSA Sequencer Ports");
      BMidiIn->type(2);
      BMidiIn->box(FL_NO_BOX);
      BMidiIn->color(FL_BACKGROUND2_COLOR);
      BMidiIn->selection_color(FL_FOREGROUND_COLOR);
      BMidiIn->labeltype(FL_NORMAL_LABEL);
      BMidiIn->labelfont(0);
      BMidiIn->labelsize(14);
      BMidiIn->labelcolor(FL_BACKGROUND2_COLOR);
      BMidiIn->textcolor(FL_BACKGROUND2_COLOR);
      BMidiIn->callback((Fl_Callback*)cb_BMidiIn);
      BMidiIn->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      BMidiIn->when(FL_WHEN_RELEASE_ALWAYS);
    } // RKR_Browser* BMidiIn
    { RKR_Counter* o = Midi_In_Counter = new RKR_Counter(30, 210, 60, 24, "Effects Receive Channel");
      Midi_In_Counter->type(1);
      Midi_In_Counter->box(FL_UP_BOX);
      Midi_In_Counter->color((Fl_Color)25);
      Midi_In_Counter->selection_color(FL_INACTIVE_COLOR);
      Midi_In_Counter->labeltype(FL_NORMAL_LABEL);
      Midi_In_Counter->labelfont(0);
      Midi_In_Counter->labelsize(12);
      Midi_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
      Midi_In_Counter->minimum(1);
      Midi_In_Counter->maximum(16);
      Midi_In_Counter->step(1);
      Midi_In_Counter->value(1);
      Midi_In_Counter->textsize(12);
      Midi_In_Counter->callback((Fl_Callback*)cb_Midi_In_Counter);
      Midi_In_Counter->align(Fl_Align(FL_ALIGN_RIGHT));
      Midi_In_Counter->when(FL_WHEN_CHANGED);
      o->set_label_offset(2);
      o->set_text_offset(2);
    } // RKR_Counter* Midi_In_Counter
    { RKR_Counter* o = Har_In_Counter = new RKR_Counter(245, 210, 60, 24, "Harmonizer Receive Channel");
      Har_In_Counter->type(1);
      Har_In_Counter->box(FL_UP_BOX);
      Har_In_Counter->color((Fl_Color)25);
      Har_In_Counter->selection_color(FL_INACTIVE_COLOR);
      Har_In_Counter->labeltype(FL_NORMAL_LABEL);
      Har_In_Counter->labelfont(0);
      Har_In_Counter->labelsize(12);
      Har_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
      Har_In_Counter->minimum(1);
      Har_In_Counter->maximum(16);
      Har_In_Counter->step(1);
      Har_In_Counter->value(1);
      Har_In_Counter->textsize(12);
      Har_In_Counter->callback((Fl_Callback*)cb_Har_In_Counter);
      Har_In_Counter->align(Fl_Align(FL_ALIGN_RIGHT));
      Har_In_Counter->when(FL_WHEN_CHANGED);
      o->set_label_offset(2);
      o->set_text_offset(2);
    } // RKR_Counter* Har_In_Counter
    { RKR_Counter* o = Stereo_Har_In_Counter = new RKR_Counter(245, 265, 60, 24, "Stereo Harm Receive Channel");
      Stereo_Har_In_Counter->type(1);
      Stereo_Har_In_Counter->box(FL_UP_BOX);
      Stereo_Har_In_Counter->color((Fl_Color)25);
      Stereo_Har_In_Counter->selection_color(FL_INACTIVE_COLOR);
      Stereo_Har_In_Counter->labeltype(FL_NORMAL_LABEL);
      Stereo_Har_In_Counter->labelfont(0);
      Stereo_Har_In_Counter->labelsize(12);
      Stereo_Har_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
      Stereo_Har_In_Counter->minimum(1);
      Stereo_Har_In_Counter->maximum(16);
      Stereo_Har_In_Counter->step(1);
      Stereo_Har_In_Counter->value(1);
      Stereo_Har_In_Counter->textsize(12);
      Stereo_Har_In_Counter->callback((Fl_Callback*)cb_Stereo_Har_In_Counter);
      Stereo_Har_In_Counter->align(Fl_Align(FL_ALIGN_RIGHT));
      Stereo_Har_In_Counter->when(FL_WHEN_CHANGED);
      o->set_label_offset(2);
      o->set_text_offset(2);
    } // RKR_Counter* Stereo_Har_In_Counter
    { RKR_Group* o = wMIDI = new RKR_Group(30, 266, 180, 23, "MIDI implementation");
      wMIDI->box(FL_DOWN_FRAME);
      wMIDI->color(FL_BACKGROUND_COLOR);
      wMIDI->selection_color(FL_BACKGROUND_COLOR);
      wMIDI->labeltype(FL_NORMAL_LABEL);
      wMIDI->labelfont(0);
      wMIDI->labelsize(12);
      wMIDI->labelcolor(FL_BACKGROUND2_COLOR);
      wMIDI->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      wMIDI->when(FL_WHEN_RELEASE);
      { RKR_Check_Button* o = Mw0 = new RKR_Check_Button(35, 268, 73, 16, "Default");
        Mw0->type(102);
        Mw0->box(FL_NO_BOX);
        Mw0->down_box(FL_DOWN_BOX);
        Mw0->color(FL_BACKGROUND_COLOR);
        Mw0->selection_color(FL_FOREGROUND_COLOR);
        Mw0->labeltype(FL_NORMAL_LABEL);
        Mw0->labelfont(0);
        Mw0->labelsize(12);
        Mw0->labelcolor(FL_BACKGROUND2_COLOR);
        Mw0->callback((Fl_Callback*)cb_Mw0);
        Mw0->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Mw0->when(FL_WHEN_RELEASE);
        o->set_label_offset(2);
      } // RKR_Check_Button* Mw0
      { RKR_Check_Button* o = Mw1 = new RKR_Check_Button(119, 268, 87, 16, "MIDI Learn");
        Mw1->type(102);
        Mw1->box(FL_NO_BOX);
        Mw1->down_box(FL_DOWN_BOX);
        Mw1->color(FL_BACKGROUND_COLOR);
        Mw1->selection_color(FL_FOREGROUND_COLOR);
        Mw1->labeltype(FL_NORMAL_LABEL);
        Mw1->labelfont(0);
        Mw1->labelsize(12);
        Mw1->labelcolor(FL_BACKGROUND2_COLOR);
        Mw1->callback((Fl_Callback*)cb_Mw1);
        Mw1->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Mw1->when(FL_WHEN_RELEASE);
        o->set_label_offset(2);
      } // RKR_Check_Button* Mw1
      o->set_label_offset(2);
      wMIDI->end();
    } // RKR_Group* wMIDI
    { RKR_Check_Button* o = AAssign = new RKR_Check_Button(30, 308, 163, 16, "Auto Assign MIDI Learn");
      AAssign->box(FL_NO_BOX);
      AAssign->down_box(FL_DOWN_BOX);
      AAssign->color(FL_BACKGROUND_COLOR);
      AAssign->selection_color(FL_FOREGROUND_COLOR);
      AAssign->labeltype(FL_NORMAL_LABEL);
      AAssign->labelfont(0);
      AAssign->labelsize(12);
      AAssign->labelcolor(FL_BACKGROUND2_COLOR);
      AAssign->callback((Fl_Callback*)cb_AAssign);
      AAssign->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      AAssign->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* AAssign
    { RKR_Check_Button* o = MTable = new RKR_Check_Button(30, 336, 193, 16, "MIDI Program Change Table");
      MTable->box(FL_NO_BOX);
      MTable->down_box(FL_DOWN_BOX);
      MTable->color(FL_BACKGROUND_COLOR);
      MTable->selection_color(FL_FOREGROUND_COLOR);
      MTable->labeltype(FL_NORMAL_LABEL);
      MTable->labelfont(0);
      MTable->labelsize(12);
      MTable->labelcolor(FL_BACKGROUND2_COLOR);
      MTable->callback((Fl_Callback*)cb_MTable);
      MTable->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      MTable->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* MTable
    { RKR_Button* o = new RKR_Button(254, 331, 70, 20, "Load");
      o->tooltip("Load program change table from file");
      o->box(FL_UP_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->callback((Fl_Callback*)cb_Load);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* o
    { RKR_Button* o = new RKR_Button(338, 331, 70, 20, "Save");
      o->tooltip("Save current program change table to file");
      o->box(FL_UP_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->callback((Fl_Callback*)cb_Save);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* o
    { scroll = new RKR_Scroll(30, 366, 430, 162);
      scroll->type(6);
      scroll->box(FL_NO_BOX);
      scroll->color(FL_BACKGROUND_COLOR);
      scroll->selection_color(FL_BACKGROUND_COLOR);
      scroll->labeltype(FL_NORMAL_LABEL);
      scroll->labelfont(0);
      scroll->labelsize(14);
      scroll->labelcolor(FL_FOREGROUND_COLOR);
      scroll->align(Fl_Align(FL_ALIGN_TOP));
      scroll->when(FL_WHEN_RELEASE);
      scroll->end();
    } // RKR_Scroll* scroll
    MIDI_SET->end();
  } // Fl_Group* MIDI_SET
  { JACK_SET = new Fl_Group(5, 26, 518, 554, "Jack");
    JACK_SET->box(FL_DOWN_FRAME);
    JACK_SET->labelfont(1);
    JACK_SET->labelcolor(FL_BACKGROUND2_COLOR);
    JACK_SET->align(Fl_Align(FL_ALIGN_LEFT));
    JACK_SET->hide();
    { Fondo9 = new Fl_Box(5, 26, 518, 554);
    } // Fl_Box* Fondo9
    { RKR_Check_Button* o = D_J_Connect = new RKR_Check_Button(30, 45, 137, 16, "Auto Connect Out");
      D_J_Connect->box(FL_NO_BOX);
      D_J_Connect->down_box(FL_DOWN_BOX);
      D_J_Connect->color(FL_BACKGROUND_COLOR);
      D_J_Connect->selection_color(FL_FOREGROUND_COLOR);
      D_J_Connect->labeltype(FL_NORMAL_LABEL);
      D_J_Connect->labelfont(0);
      D_J_Connect->labelsize(12);
      D_J_Connect->labelcolor(FL_BACKGROUND2_COLOR);
      D_J_Connect->callback((Fl_Callback*)cb_D_J_Connect);
      D_J_Connect->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      D_J_Connect->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* D_J_Connect
    { JackCo = new RKR_Browser(30, 85, 260, 140, "Output Ports");
      JackCo->type(3);
      JackCo->box(FL_NO_BOX);
      JackCo->color(FL_BACKGROUND2_COLOR);
      JackCo->selection_color(FL_FOREGROUND_COLOR);
      JackCo->labeltype(FL_NORMAL_LABEL);
      JackCo->labelfont(0);
      JackCo->labelsize(14);
      JackCo->labelcolor(FL_BACKGROUND2_COLOR);
      JackCo->textcolor(FL_BACKGROUND2_COLOR);
      JackCo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      JackCo->when(FL_WHEN_RELEASE_ALWAYS);
    } // RKR_Browser* JackCo
    { RKR_Check_Button* o = D_IJ_Connect = new RKR_Check_Button(30, 245, 125, 16, "Auto Connect In");
      D_IJ_Connect->box(FL_NO_BOX);
      D_IJ_Connect->down_box(FL_DOWN_BOX);
      D_IJ_Connect->color(FL_BACKGROUND_COLOR);
      D_IJ_Connect->selection_color(FL_FOREGROUND_COLOR);
      D_IJ_Connect->labeltype(FL_NORMAL_LABEL);
      D_IJ_Connect->labelfont(0);
      D_IJ_Connect->labelsize(12);
      D_IJ_Connect->labelcolor(FL_BACKGROUND2_COLOR);
      D_IJ_Connect->callback((Fl_Callback*)cb_D_IJ_Connect);
      D_IJ_Connect->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      D_IJ_Connect->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* D_IJ_Connect
    { JackIn = new RKR_Browser(30, 285, 260, 140, "Input Ports");
      JackIn->type(3);
      JackIn->box(FL_NO_BOX);
      JackIn->color(FL_BACKGROUND2_COLOR);
      JackIn->selection_color(FL_FOREGROUND_COLOR);
      JackIn->labeltype(FL_NORMAL_LABEL);
      JackIn->labelfont(0);
      JackIn->labelsize(14);
      JackIn->labelcolor(FL_BACKGROUND2_COLOR);
      JackIn->textcolor(FL_BACKGROUND2_COLOR);
      JackIn->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      JackIn->when(FL_WHEN_RELEASE_ALWAYS);
    } // RKR_Browser* JackIn
    JACK_SET->end();
  } // Fl_Group* JACK_SET
  { MISC_SET = new Fl_Group(5, 26, 518, 554, "Misc");
    MISC_SET->box(FL_DOWN_FRAME);
    MISC_SET->labelfont(1);
    MISC_SET->labelcolor(FL_BACKGROUND2_COLOR);
    MISC_SET->align(Fl_Align(FL_ALIGN_LEFT));
    MISC_SET->hide();
    { Fondo10 = new Fl_Box(5, 26, 518, 554);
    } // Fl_Box* Fondo10
    { RKR_Check_Button* o = MESSAGE_DISABLE = new RKR_Check_Button(30, 40, 141, 16, "Disable Warnings    ");
      MESSAGE_DISABLE->box(FL_NO_BOX);
      MESSAGE_DISABLE->down_box(FL_DOWN_BOX);
      MESSAGE_DISABLE->color(FL_BACKGROUND_COLOR);
      MESSAGE_DISABLE->selection_color(FL_FOREGROUND_COLOR);
      MESSAGE_DISABLE->labeltype(FL_NORMAL_LABEL);
      MESSAGE_DISABLE->labelfont(0);
      MESSAGE_DISABLE->labelsize(12);
      MESSAGE_DISABLE->labelcolor(FL_BACKGROUND2_COLOR);
      MESSAGE_DISABLE->callback((Fl_Callback*)cb_MESSAGE_DISABLE);
      MESSAGE_DISABLE->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      MESSAGE_DISABLE->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* MESSAGE_DISABLE
    { RKR_Check_Button* o = T_TIMEOUT = new RKR_Check_Button(30, 70, 143, 16, "Tap Tempo Timeout");
      T_TIMEOUT->box(FL_NO_BOX);
      T_TIMEOUT->down_box(FL_DOWN_BOX);
      T_TIMEOUT->color(FL_BACKGROUND_COLOR);
      T_TIMEOUT->selection_color(FL_FOREGROUND_COLOR);
      T_TIMEOUT->labeltype(FL_NORMAL_LABEL);
      T_TIMEOUT->labelfont(0);
      T_TIMEOUT->labelsize(12);
      T_TIMEOUT->labelcolor(FL_BACKGROUND2_COLOR);
      T_TIMEOUT->callback((Fl_Callback*)cb_T_TIMEOUT);
      T_TIMEOUT->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      T_TIMEOUT->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* T_TIMEOUT
    { RKR_Check_Button* o = ENA_TOOL = new RKR_Check_Button(30, 100, 118, 16, "Enable Tooltips       ");
      ENA_TOOL->box(FL_NO_BOX);
      ENA_TOOL->down_box(FL_DOWN_BOX);
      ENA_TOOL->color(FL_BACKGROUND_COLOR);
      ENA_TOOL->selection_color(FL_FOREGROUND_COLOR);
      ENA_TOOL->labeltype(FL_NORMAL_LABEL);
      ENA_TOOL->labelfont(0);
      ENA_TOOL->labelsize(12);
      ENA_TOOL->labelcolor(FL_BACKGROUND2_COLOR);
      ENA_TOOL->callback((Fl_Callback*)cb_ENA_TOOL);
      ENA_TOOL->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      ENA_TOOL->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* ENA_TOOL
    { RKR_Box* o = new RKR_Box(30, 130, 400, 56, "Specify the delay an item gets selected when the mouse pointer is paused over\
 it:");
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(132|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_RELEASE);
    } // RKR_Box* o
    { Focus_Slider = new RKR_Fl_Slider(30, 180, 400, 22);
      Focus_Slider->type(5);
      Focus_Slider->box(FL_ROUND_DOWN_BOX);
      Focus_Slider->color(FL_BACKGROUND_COLOR);
      Focus_Slider->selection_color(FL_BACKGROUND_COLOR);
      Focus_Slider->labeltype(FL_NORMAL_LABEL);
      Focus_Slider->labelfont(0);
      Focus_Slider->labelsize(10);
      Focus_Slider->labelcolor(FL_FOREGROUND_COLOR);
      Focus_Slider->maximum(100);
      Focus_Slider->step(1);
      Focus_Slider->value(25);
      Focus_Slider->callback((Fl_Callback*)cb_Focus_Slider, (void*)(UD_RKR_Highlight));
      Focus_Slider->align(Fl_Align(FL_ALIGN_TOP));
      Focus_Slider->when(FL_WHEN_CHANGED);
    } // RKR_Fl_Slider* Focus_Slider
    { RKR_Box* o = new RKR_Box(30, 205, 69, 17, "Disabled");
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_RELEASE);
    } // RKR_Box* o
    { RKR_Box* o = new RKR_Box(209, 205, 69, 17, "Medium");
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_RELEASE);
    } // RKR_Box* o
    { RKR_Box* o = new RKR_Box(362, 205, 69, 17, "Long");
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_RELEASE);
    } // RKR_Box* o
    { RKR_Check_Button* o = NSM_SINGLE_STATE = new RKR_Check_Button(30, 250, 124, 16, "NSM Single State");
      NSM_SINGLE_STATE->tooltip("Check if you want NSM session to always save the last state of the active pre\
set.\n This will save all changes to effects including MIDI control changes.");
      NSM_SINGLE_STATE->box(FL_NO_BOX);
      NSM_SINGLE_STATE->down_box(FL_DOWN_BOX);
      NSM_SINGLE_STATE->color(FL_BACKGROUND_COLOR);
      NSM_SINGLE_STATE->selection_color(FL_FOREGROUND_COLOR);
      NSM_SINGLE_STATE->labeltype(FL_NORMAL_LABEL);
      NSM_SINGLE_STATE->labelfont(0);
      NSM_SINGLE_STATE->labelsize(12);
      NSM_SINGLE_STATE->labelcolor(FL_BACKGROUND2_COLOR);
      NSM_SINGLE_STATE->callback((Fl_Callback*)cb_NSM_SINGLE_STATE);
      NSM_SINGLE_STATE->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      NSM_SINGLE_STATE->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
    } // RKR_Check_Button* NSM_SINGLE_STATE
    MISC_SET->end();
  } // Fl_Group* MISC_SET
  { USER_SET = new Fl_Group(5, 26, 518, 554, "User");
    USER_SET->box(FL_DOWN_FRAME);
    USER_SET->labelfont(1);
    USER_SET->labelcolor(FL_BACKGROUND2_COLOR);
    USER_SET->align(Fl_Align(FL_ALIGN_LEFT));
    USER_SET->hide();
    { Fondo11 = new Fl_Box(5, 26, 518, 554);
    } // Fl_Box* Fondo11
    { RKR_File_Input* o = Udir = new RKR_File_Input(20, 50, 390, 40, "User Directory");
      Udir->tooltip("The User Directory must be set to a writable location and all custom user ban\
ks must be stored in this directory.");
      Udir->box(FL_DOWN_BOX);
      Udir->color(FL_BACKGROUND2_COLOR);
      Udir->selection_color(FL_SELECTION_COLOR);
      Udir->labeltype(FL_NORMAL_LABEL);
      Udir->labelfont(0);
      Udir->labelsize(12);
      Udir->labelcolor(FL_BACKGROUND2_COLOR);
      Udir->textcolor(FL_BACKGROUND2_COLOR);
      Udir->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      Udir->when(FL_WHEN_CHANGED);
      o->set_label_offset(2);
      o->set_text_offset(4);
    } // RKR_File_Input* Udir
    { RKR_Button* o = UD_Browser = new RKR_Button(415, 65, 65, 20, "Browse");
      UD_Browser->tooltip("You must make and set a User Directory if  you want to make custom changes.\n\
The user directory is where all custom banks and files must be placed to be lo\
aded by the program.\nSee F1 help under General/Preferences for additional inf\
ormation.");
      UD_Browser->box(FL_UP_BOX);
      UD_Browser->color(FL_BACKGROUND_COLOR);
      UD_Browser->selection_color(FL_BACKGROUND_COLOR);
      UD_Browser->labeltype(FL_NORMAL_LABEL);
      UD_Browser->labelfont(0);
      UD_Browser->labelsize(14);
      UD_Browser->labelcolor(FL_FOREGROUND_COLOR);
      UD_Browser->callback((Fl_Callback*)cb_UD_Browser);
      UD_Browser->align(Fl_Align(FL_ALIGN_CENTER));
      UD_Browser->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* UD_Browser
    { RKR_File_Input* o = BFiname = new RKR_File_Input(20, 120, 390, 40, "Default User Bank Filename");
      BFiname->tooltip("This is the bank that will be selected with the \'U\' button from the main wi\
ndow or the Bank window.");
      BFiname->box(FL_DOWN_BOX);
      BFiname->color(FL_BACKGROUND2_COLOR);
      BFiname->selection_color(FL_SELECTION_COLOR);
      BFiname->labeltype(FL_NORMAL_LABEL);
      BFiname->labelfont(0);
      BFiname->labelsize(12);
      BFiname->labelcolor(FL_BACKGROUND2_COLOR);
      BFiname->textcolor(FL_BACKGROUND2_COLOR);
      BFiname->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      BFiname->when(FL_WHEN_CHANGED);
      o->set_label_offset(2);
      o->set_text_offset(4);
    } // RKR_File_Input* BFiname
    { RKR_Button* o = BF_Browser = new RKR_Button(415, 135, 65, 20, "Browse");
      BF_Browser->tooltip("Choose a default user bank in your User Directory that you want the \'U\' but\
ton to select.");
      BF_Browser->box(FL_UP_BOX);
      BF_Browser->color(FL_BACKGROUND_COLOR);
      BF_Browser->selection_color(FL_BACKGROUND_COLOR);
      BF_Browser->labeltype(FL_NORMAL_LABEL);
      BF_Browser->labelfont(0);
      BF_Browser->labelsize(14);
      BF_Browser->labelcolor(FL_FOREGROUND_COLOR);
      BF_Browser->callback((Fl_Callback*)cb_BF_Browser);
      BF_Browser->align(Fl_Align(FL_ALIGN_CENTER));
      BF_Browser->when(FL_WHEN_RELEASE);
      o->set_label_offset(4);
    } // RKR_Button* BF_Browser
    { RKR_Input* o = Username = new RKR_Input(20, 192, 240, 21, "Username");
      Username->tooltip("The name to be used for author below the preset name on the main window.");
      Username->box(FL_DOWN_BOX);
      Username->color(FL_BACKGROUND2_COLOR);
      Username->selection_color(FL_SELECTION_COLOR);
      Username->labeltype(FL_NORMAL_LABEL);
      Username->labelfont(0);
      Username->labelsize(12);
      Username->labelcolor(FL_BACKGROUND2_COLOR);
      Username->textcolor(FL_BACKGROUND2_COLOR);
      Username->callback((Fl_Callback*)cb_Username);
      Username->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      Username->when(FL_WHEN_RELEASE);
      o->set_label_offset(2);
      o->set_text_offset(4);
    } // RKR_Input* Username
    USER_SET->end();
  } // Fl_Group* USER_SET
  STabs->end();
} // RKR_Tabs* STabs
this->m_process = NULL;
this->m_parent = NULL;
end();
}

void SettingsWindowGui::initialize(RKR *_rkr,RKRGUI *_rgui ) {
  m_process = _rkr;
  m_parent= _rgui;
}

Fl_Menu_Item * SettingsWindowGui::get_menu_Har_Downsample() {
  return menu_Har_Downsample;
}

void SettingsWindowGui::make_table_window() {
  // Fill settings midi table scroll
        scroll->clear();
  
        scroll->begin();
      
        for (intptr_t y=0; y<128; y++)
        {
            char buf[20];
            snprintf(buf, sizeof(buf), "%d",(int)y);
            RKR_Box* b = new RKR_Box(6,y*25+22,40,25);
            b->box(FL_DOWN_BOX);
            b->copy_label(buf);
            b->labelcolor(FL_BLACK);
            b->user_data((void *) UD_Bank_Number);
      
            RKR_Choice* cb = new RKR_Choice(120,y*25+25,130,20);
            cb->copy_label("Bank");
            cb->labelcolor(FL_WHITE);
  
            // Add all banks
            for(unsigned bnk = 0; bnk < m_process->Bank_Vector.size (); bnk++)
            {
                cb->add (m_process->Bank_Vector[bnk].Bank_Name_Clean.c_str());
            }
  
            cb->user_data((void *) (UD_Bank_Used_Start + y));
            cb->callback((Fl_Callback *)m_parent->bank_click);
            cb->set_label_offset(4);
            cb->set_text_offset(4);
      
            RKR_Choice* cp = new RKR_Choice(310,y*25+25,130,20);
            cp->copy_label("Preset");
            cp->labelcolor(FL_WHITE);
            cp->user_data((void *) (UD_Preset_Used_Start + y));
            cp->callback((Fl_Callback *)m_parent->p_click);
            cp->set_label_offset(4);
            cp->set_text_offset(4);
        }
      
        scroll->end();
        
        Put_MidiTable();
        
        /* Resize because the starting window may have been resized.
         * Adjusted to the current size of the window group which is
         * MIDI_SET->w(), MIDI_SET->h(). If the group default size is
         * ever changed in fluid, the magic numbers must be changed to match */
        int MIDI_set_start_width = 518;     // The MIDI group default width - set in fluid
        int MIDI_set_start_height = 554;    // The MIDI group default height - set in fluid
        float W_midi_set_ratio = (float) MIDI_SET->w() / MIDI_set_start_width;
        float H_midi_set_ratio = (float) MIDI_SET->h() / MIDI_set_start_height;
        
        scroll->resize
        (
          (float) scroll->get_start_x() * W_midi_set_ratio,
          (float) scroll->get_start_y() * H_midi_set_ratio,
          ((float) scroll->get_start_width() * W_midi_set_ratio),
          (float) scroll->get_start_height() * H_midi_set_ratio
        );
}

void SettingsWindowGui::fill_mptable(int num,int value) {
  // Fill settings scroll
      for (int t=0; t < scroll->children(); t++)
      {
          Fl_Widget *w = scroll->child(t);
          long long temp = (long long) w->user_data();
          if ((int)temp == num)
          {
              RKR_Choice *p = static_cast<RKR_Choice *>(w);
              p->clear();
              for(int i=1; i<=60; i++)
              {
                  if(m_process->MIDI_Table_Bank_Preset_Names[value][i].Preset_Name[0] != 0)
                  {
                      // We add the preset number here to avoid duplicate names which the fltk choice
                      // widget will eliminate into one. It does not allow duplicates and things
                      // will not align if eliminated.
                      char buf[128];
                      snprintf(buf, sizeof(buf), "(%d) %s", i, m_process->MIDI_Table_Bank_Preset_Names[value][i].Preset_Name);
                      p->add(buf);
                      p->textfont (global_font_type);
                  }
                  else
                  {
                      char buf[128];
                      snprintf(buf, sizeof(buf), "(%d) Untitled", i);
                      p->add(buf);
                      p->textfont (global_font_type);
                  }
              }
              p->redraw();
              break;
          }
      }
}

void SettingsWindowGui::mtfillvalue(int num,int value) {
  // fill settings scroll midi table
      for (int t=0; t < scroll->children(); t++)
      {
          Fl_Widget *w = scroll->child(t);
          long long temp = (long long) w->user_data();
          if ((int)temp == num)
          {
              RKR_Choice *p = static_cast<RKR_Choice *>(w);
              p->value(value);
              break;
          }
      }
}

void SettingsWindowGui::Put_MidiTable() {
  // Put_MidiTable
    for(int i=0; i<128; i++)
    {
        mtfillvalue(i + UD_Bank_Used_Start, m_process->MIDI_Table[i].bank);
        fill_mptable(i + UD_Preset_Used_Start, m_process->MIDI_Table[i].bank);
        mtfillvalue(i + UD_Preset_Used_Start, m_process->MIDI_Table[i].preset);
    }
}

void SettingsWindowGui::update_convo_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Cast to derived class */
  Convolotron *Efx_Convolotron = static_cast<Convolotron*>(m_process->Rack_Effects[EFX_CONVOLOTRON]);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Convolotron->save_parameters();
  
  /* Save current file name and path */
  std::string filename(Efx_Convolotron->Filename);
  
  /* Delete and re-create the efx with new downsample settings */
  delete m_process->Rack_Effects[EFX_CONVOLOTRON];
  m_process->Rack_Effects[EFX_CONVOLOTRON] = new Convolotron(m_process->Config.Con_Down, m_process->Config.Con_U_Q, m_process->Config.Con_D_Q, m_process->fSample_rate, m_process->period_master);
  Efx_Convolotron = static_cast<Convolotron*>(m_process->Rack_Effects[EFX_CONVOLOTRON]);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  /* Reset parameters and filename */
  Efx_Convolotron->reset_parameters(save_state);
  
  /* Check for user file and re-load if present */
  if(Efx_Convolotron->getpar(Convo_User_File))
  {
      RKRP::strlcpy(Efx_Convolotron->Filename,filename.c_str(), sizeof(Efx_Convolotron->Filename));
      if(!Efx_Convolotron->setfile(USERFILE))
      {
          m_process->Handle_Message(14, filename);
      };
  }
  
  /* Turn processing back on */
  m_process->quality_update = false;
}

void SettingsWindowGui::update_revtron_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Cast to derived class */
  Reverbtron *Efx_Reverbtron = static_cast<Reverbtron*>(m_process->Rack_Effects[EFX_REVERBTRON]);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Reverbtron->save_parameters();
  
  /* Save current file name and path */
  std::string filename(Efx_Reverbtron->Filename);
  
  /* Delete and re-create the efx with new downsample settings */
  delete m_process->Rack_Effects[EFX_REVERBTRON];
  m_process->Rack_Effects[EFX_REVERBTRON] = new Reverbtron(m_process->Config.Rev_Down, m_process->Config.Rev_U_Q, m_process->Config.Rev_D_Q, m_process->fSample_rate, m_process->period_master);
  Efx_Reverbtron = static_cast<Reverbtron*>(m_process->Rack_Effects[EFX_REVERBTRON]);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  /* Reset parameters and filename */
  Efx_Reverbtron->reset_parameters(save_state);
  
  /* Check for user file and re-load if present */
  if(Efx_Reverbtron->getpar(Revtron_User_File))
  {
      RKRP::strlcpy(Efx_Reverbtron->Filename,filename.c_str(), sizeof(Efx_Reverbtron->Filename));
      if(!Efx_Reverbtron->setfile(USERFILE))
      {
          m_process->Handle_Message(14, filename);
      };
  }
  
  /* Turn processing back on */
  m_process->quality_update = false;
}

void SettingsWindowGui::update_harmonizer_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* This is for the gui bypass */
  int hold_bypass = m_process->EFX_Active[EFX_HARMONIZER];
  m_process->EFX_Active[EFX_HARMONIZER] = 0;
  
  /* Cast to derived class */
  Harmonizer *Efx_Harmonizer = static_cast<Harmonizer*>(m_process->Rack_Effects[EFX_HARMONIZER]);
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Harmonizer->save_parameters();
  
  /* Delete and re-create the efx with new downsample settings */
  delete m_process->Rack_Effects[EFX_HARMONIZER];
  m_process->Rack_Effects[EFX_HARMONIZER] = new Harmonizer((long) m_process->Config.HarQual, m_process->Config.Har_Down, m_process->Config.Har_U_Q, m_process->Config.Har_D_Q, m_process->fSample_rate, m_process->period_master);
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_Harmonizer = static_cast<Harmonizer*>(m_process->Rack_Effects[EFX_HARMONIZER]);
  
  /* Reset parameters and filename */
  Efx_Harmonizer->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
  
  /* Reset bypass */ 
  m_process->EFX_Active[EFX_HARMONIZER] = hold_bypass;
  
  /* Reset user select */
  if(Efx_Harmonizer->getpar(Harm_Select))
  {
      Efx_Harmonizer->changepar(Harm_Select, Efx_Harmonizer->getpar(Harm_Select));
      m_process->RC_Harm->cleanup();
      m_parent->Chord(0);
  }
}

void SettingsWindowGui::update_stereoharm_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Cast to derived class */
  StereoHarm *Efx_StereoHarm = static_cast<StereoHarm*>(m_process->Rack_Effects[EFX_STEREOHARM]);
  
  /* This is for the gui bypass */
  int hold_bypass = m_process->EFX_Active[EFX_STEREOHARM];
  m_process->EFX_Active[EFX_STEREOHARM] = 0;
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_StereoHarm->save_parameters();
  
  /* Delete and re-create the efx with new downsample settings */
  delete m_process->Rack_Effects[EFX_STEREOHARM];
  m_process->Rack_Effects[EFX_STEREOHARM] = new StereoHarm((long) m_process->Config.SteQual, m_process->Config.Ste_Down, m_process->Config.Ste_U_Q, m_process->Config.Ste_D_Q, m_process->fSample_rate, m_process->period_master);
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_StereoHarm = static_cast<StereoHarm*>(m_process->Rack_Effects[EFX_STEREOHARM]);
  
  /* Reset parameters and filename */
  Efx_StereoHarm->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
  
  /* Reset bypass */ 
  m_process->EFX_Active[EFX_STEREOHARM] = hold_bypass;
  
  /* Reset user select */
  if(Efx_StereoHarm->getpar(Sharm_Select))
  {
      Efx_StereoHarm->changepar(Sharm_Select, Efx_StereoHarm->getpar(Sharm_Select));
      m_process->RC_Stereo_Harm->cleanup();
      m_parent->Chord(1);
  }
}

void SettingsWindowGui::update_sequence_quality() {
  /* This is for the gui bypass, tempo change */
  int hold_bypass = m_process->EFX_Active[EFX_SEQUENCE];
  m_process->EFX_Active[EFX_SEQUENCE] = 0;
  
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Cast to derived class */
  Sequence *Efx_Sequence = static_cast<Sequence*>(m_process->Rack_Effects[EFX_SEQUENCE]);
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Sequence->save_parameters();
  
  /* Delete and re-create the efx with new downsample settings */
  delete m_process->Rack_Effects[EFX_SEQUENCE];
  m_process->Rack_Effects[EFX_SEQUENCE] = new Sequence((long) m_process->Config.SeqQual, m_process->Config.Seq_Down, m_process->Config.Seq_U_Q, m_process->Config.Seq_D_Q, m_process->fSample_rate, m_process->period_master);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_Sequence = static_cast<Sequence*>(m_process->Rack_Effects[EFX_SEQUENCE]);
  
  /* Reset parameters */
  Efx_Sequence->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
  
  /* Reset bypass */ 
  m_process->EFX_Active[EFX_SEQUENCE] = hold_bypass;
}

void SettingsWindowGui::update_shifter_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Cast to derived class */
  Shifter *Efx_Shifter = static_cast<Shifter*>(m_process->Rack_Effects[EFX_SHIFTER]);
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Shifter->save_parameters();
  
  /* Delete and re-create the efx with new downsample settings */
  delete m_process->Rack_Effects[EFX_SHIFTER];
  m_process->Rack_Effects[EFX_SHIFTER] = new Shifter((long) m_process->Config.ShiQual, m_process->Config.Shi_Down, m_process->Config.Shi_U_Q, m_process->Config.Shi_D_Q, m_process->fSample_rate, m_process->period_master);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_Shifter = static_cast<Shifter*>(m_process->Rack_Effects[EFX_SHIFTER]);
  
  /* Reset parameters */
  Efx_Shifter->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
}

void SettingsWindowGui::update_vocoder_quality() {
  /* This is for the gui volume meter */
  int hold_bypass = m_process->EFX_Active[EFX_VOCODER];
  m_process->EFX_Active[EFX_VOCODER] = 0;
  
  /* shut off all processing */
  m_process->quality_update = true;
  
  Vocoder *Efx_Vocoder = static_cast<Vocoder*>(m_process->Rack_Effects[EFX_VOCODER]);
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Vocoder->save_parameters();
  
  /* Delete and re-create the efx with new downsample settings */
  delete m_process->Rack_Effects[EFX_VOCODER];
  m_process->Rack_Effects[EFX_VOCODER] = new Vocoder(m_process->auxresampled, m_process->Config.VocBands, m_process->Config.Voc_Down, m_process->Config.Voc_U_Q, m_process->Config.Voc_D_Q, m_process->fSample_rate, m_process->period_master);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_Vocoder = static_cast<Vocoder*>(m_process->Rack_Effects[EFX_VOCODER]);
  
  /* Reset parameters */
  Efx_Vocoder->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
  
  /* Reset bypass */
  m_process->EFX_Active[EFX_VOCODER] = hold_bypass;
}

void SettingsWindowGui::update_distortion_quality() {
  /* shut off all processing */
    m_process->quality_update = true;
    
    Distorsion *Efx_Distortion = static_cast<Distorsion*>(m_process->Rack_Effects[EFX_DISTORTION]);
    /* Wait a bit */
    usleep(C_MILLISECONDS_25);
    
    /* Save current parameters */
    std::vector<int> save_state = Efx_Distortion->save_parameters();
    
    /* Delete and re-create the efx with new resample settings */
    delete m_process->Rack_Effects[EFX_DISTORTION];
    m_process->Rack_Effects[EFX_DISTORTION] = new Distorsion(m_process->Config.Dist_res_amount, m_process->Config.Dist_up_q, m_process->Config.Dist_down_q, m_process->fSample_rate, m_process->period_master);
    
    /* Wait for things to complete */
    usleep(C_MILLISECONDS_50);
    
    Efx_Distortion = static_cast<Distorsion*>(m_process->Rack_Effects[EFX_DISTORTION]);
    
    /* Reset parameters */
    Efx_Distortion->reset_parameters(save_state);
    
    /* Turn processing back on */
    m_process->quality_update = false;
}

void SettingsWindowGui::update_overdrive_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  Overdrive *Efx_Overdrive = static_cast<Overdrive*>(m_process->Rack_Effects[EFX_OVERDRIVE]);
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Overdrive->save_parameters();
  
  /* Delete and re-create the efx with new resample settings */
  delete m_process->Rack_Effects[EFX_OVERDRIVE];
  m_process->Rack_Effects[EFX_OVERDRIVE] = new Overdrive(m_process->Config.Ovrd_res_amount, m_process->Config.Ovrd_up_q, m_process->Config.Ovrd_down_q, m_process->fSample_rate, m_process->period_master);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_Overdrive = static_cast<Overdrive*>(m_process->Rack_Effects[EFX_OVERDRIVE]);
  
  /* Reset parameters */
  Efx_Overdrive->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
}

void SettingsWindowGui::update_derelict_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Cast to derived class */
  Derelict *Efx_Derelict = static_cast<Derelict*>(m_process->Rack_Effects[EFX_DERELICT]);
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_Derelict->save_parameters();
  
  /* Delete and re-create the efx with new resample settings */
  delete m_process->Rack_Effects[EFX_DERELICT];
  m_process->Rack_Effects[EFX_DERELICT] = new Derelict(m_process->Config.Dere_res_amount, m_process->Config.Dere_up_q, m_process->Config.Dere_down_q, m_process->fSample_rate, m_process->period_master);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_Derelict = static_cast<Derelict*>(m_process->Rack_Effects[EFX_DERELICT]);
  
  /* Reset parameters */
  Efx_Derelict->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
}

void SettingsWindowGui::update_distband_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Cast to derived class */
  DistBand *Efx_DistBand = static_cast<DistBand*>(m_process->Rack_Effects[EFX_DISTBAND]);
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_DistBand->save_parameters();
  
  /* Delete and re-create the efx with new resample settings */
  delete m_process->Rack_Effects[EFX_DISTBAND];
  m_process->Rack_Effects[EFX_DISTBAND] = new DistBand(m_process->Config.DBand_res_amount, m_process->Config.DBand_up_q, m_process->Config.DBand_down_q, m_process->fSample_rate, m_process->period_master);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_DistBand = static_cast<DistBand*>(m_process->Rack_Effects[EFX_DISTBAND]);
  
  /* Reset parameters */
  Efx_DistBand->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
}

void SettingsWindowGui::update_stompbox_quality() {
  /* shut off all processing */
  m_process->quality_update = true;
  
  /* Cast to derived class */
  StompBox *Efx_StompBox = static_cast<StompBox*>(m_process->Rack_Effects[EFX_STOMPBOX]);
  
  /* Wait a bit */
  usleep(C_MILLISECONDS_25);
  
  /* Save current parameters */
  std::vector<int> save_state = Efx_StompBox->save_parameters();
  
  /* Delete and re-create the efx with new resample settings */
  delete m_process->Rack_Effects[EFX_STOMPBOX];
  m_process->Rack_Effects[EFX_STOMPBOX] = new StompBox(m_process->Config.Stomp_res_amount, m_process->Config.Stomp_up_q, m_process->Config.Stomp_down_q, m_process->fSample_rate, m_process->period_master);
  
  /* Wait for things to complete */
  usleep(C_MILLISECONDS_50);
  
  Efx_StompBox = static_cast<StompBox*>(m_process->Rack_Effects[EFX_STOMPBOX]);
  
  /* Reset parameters */
  Efx_StompBox->reset_parameters(save_state);
  
  /* Turn processing back on */
  m_process->quality_update = false;
}
