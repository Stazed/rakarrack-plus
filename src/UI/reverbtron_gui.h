// generated by Fast Light User Interface Designer (fluid) version 1.0309

#ifndef reverbtron_gui_h
#define reverbtron_gui_h
#include <FL/Fl.H>
#include "RKR_Light_Button.h"
#include "RKR_Check_Button.h"
#include "RKR_Choice.h"
#include "RKR_GUI_Effect.h"
#include "RKR_Slider.h"
#include "../process.h"
#include "rakarrack.h"

class RevtronGui : public RKR_Gui_Effect {
public:
  RevtronGui(int X, int Y, int W, int H, const char *L = 0);
  RKR_Light_Button *revtron_activar;
private:
  inline void cb_revtron_activar_i(RKR_Light_Button*, void*);
  static void cb_revtron_activar(RKR_Light_Button*, void*);
public:
  RKR_Choice *revtron_preset;
private:
  inline void cb_revtron_preset_i(RKR_Choice*, void*);
  static void cb_revtron_preset(RKR_Choice*, void*);
  static Fl_Menu_Item menu_revtron_preset[];
public:
  RKR_Slider *revtron_WD;
private:
  inline void cb_revtron_WD_i(RKR_Slider*, void*);
  static void cb_revtron_WD(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_pan;
private:
  inline void cb_revtron_pan_i(RKR_Slider*, void*);
  static void cb_revtron_pan(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_level;
private:
  inline void cb_revtron_level_i(RKR_Slider*, void*);
  static void cb_revtron_level(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_damp;
private:
  inline void cb_revtron_damp_i(RKR_Slider*, void*);
  static void cb_revtron_damp(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_fb;
private:
  inline void cb_revtron_fb_i(RKR_Slider*, void*);
  static void cb_revtron_fb(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_length;
private:
  inline void cb_revtron_length_i(RKR_Slider*, void*);
  static void cb_revtron_length(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_strech;
private:
  inline void cb_revtron_strech_i(RKR_Slider*, void*);
  static void cb_revtron_strech(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_idelay;
private:
  inline void cb_revtron_idelay_i(RKR_Slider*, void*);
  static void cb_revtron_idelay(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_fade;
private:
  inline void cb_revtron_fade_i(RKR_Slider*, void*);
  static void cb_revtron_fade(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_diff;
private:
  inline void cb_revtron_diff_i(RKR_Slider*, void*);
  static void cb_revtron_diff(RKR_Slider*, void*);
public:
  RKR_Slider *revtron_LPF;
private:
  inline void cb_revtron_LPF_i(RKR_Slider*, void*);
  static void cb_revtron_LPF(RKR_Slider*, void*);
public:
  RKR_Check_Button *revtron_rv;
private:
  inline void cb_revtron_rv_i(RKR_Check_Button*, void*);
  static void cb_revtron_rv(RKR_Check_Button*, void*);
public:
  RKR_Check_Button *revtron_es;
private:
  inline void cb_revtron_es_i(RKR_Check_Button*, void*);
  static void cb_revtron_es(RKR_Check_Button*, void*);
public:
  RKR_Check_Button *revtron_safe;
private:
  inline void cb_revtron_safe_i(RKR_Check_Button*, void*);
  static void cb_revtron_safe(RKR_Check_Button*, void*);
public:
  RKR_Box *revtron_user;
  RKR_Button *B_scan;
private:
  inline void cb_B_scan_i(RKR_Button*, void*);
  static void cb_B_scan(RKR_Button*, void*);
public:
  RKR_Choice *revtron_fnum;
private:
  inline void cb_revtron_fnum_i(RKR_Choice*, void*);
  static void cb_revtron_fnum(RKR_Choice*, void*);
  static Fl_Menu_Item menu_revtron_fnum[];
public:
  void parameter_refresh(int index);
  void add_reverbtron_file(const std::string &name);
  void add_user_files();
  void scan_for_new_rvb_files();
};
#endif
